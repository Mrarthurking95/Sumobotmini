
Sumov1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800245c  0800245c  0001245c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800248c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000188  20000010  0800249c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000198  0800249c  00020198  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015bee  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b68  00000000  00000000  00035c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000073a6  00000000  00000000  0003878f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a30  00000000  00000000  0003fb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dd0  00000000  00000000  00040568  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006275  00000000  00000000  00041338  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003dc3  00000000  00000000  000475ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b370  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001dc0  00000000  00000000  0004b3ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002444 	.word	0x08002444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002444 	.word	0x08002444

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fb92 	bl	800088c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fb48 	bl	800080c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	2000000c 	.word	0x2000000c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fb21 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 ffa8 	bl	8002100 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000003c 	.word	0x2000003c

080001dc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80001dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80001de:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80001e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001e2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80001e6:	d11b      	bne.n	8000220 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80001e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	6892      	ldr	r2, [r2, #8]
 80001f4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80001f8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80001fc:	d10c      	bne.n	8000218 <ADC_DMAConvCplt+0x3c>
 80001fe:	68da      	ldr	r2, [r3, #12]
 8000200:	b952      	cbnz	r2, 8000218 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000208:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800020a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020c:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800020e:	bf5e      	ittt	pl
 8000210:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000212:	f042 0201 	orrpl.w	r2, r2, #1
 8000216:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000218:	4618      	mov	r0, r3
 800021a:	f001 ff25 	bl	8002068 <HAL_ADC_ConvCpltCallback>
 800021e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000220:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4718      	bx	r3

0800022a <HAL_ADC_ConvHalfCpltCallback>:
 800022a:	4770      	bx	lr

0800022c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800022c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800022e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000230:	f7ff fffb 	bl	800022a <HAL_ADC_ConvHalfCpltCallback>
 8000234:	bd08      	pop	{r3, pc}

08000236 <HAL_ADC_LevelOutOfWindowCallback>:
 8000236:	4770      	bx	lr

08000238 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000238:	6803      	ldr	r3, [r0, #0]
{
 800023a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800023c:	685a      	ldr	r2, [r3, #4]
{
 800023e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000240:	0690      	lsls	r0, r2, #26
 8000242:	d527      	bpl.n	8000294 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	0791      	lsls	r1, r2, #30
 8000248:	d524      	bpl.n	8000294 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800024a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800024c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800024e:	bf5e      	ittt	pl
 8000250:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000252:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000256:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000258:	689a      	ldr	r2, [r3, #8]
 800025a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800025e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000262:	d110      	bne.n	8000286 <HAL_ADC_IRQHandler+0x4e>
 8000264:	68e2      	ldr	r2, [r4, #12]
 8000266:	b972      	cbnz	r2, 8000286 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000268:	685a      	ldr	r2, [r3, #4]
 800026a:	f022 0220 	bic.w	r2, r2, #32
 800026e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000276:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800027a:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800027c:	bf5e      	ittt	pl
 800027e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000280:	f043 0301 	orrpl.w	r3, r3, #1
 8000284:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000286:	4620      	mov	r0, r4
 8000288:	f001 feee 	bl	8002068 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800028c:	f06f 0212 	mvn.w	r2, #18
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000294:	6823      	ldr	r3, [r4, #0]
 8000296:	685a      	ldr	r2, [r3, #4]
 8000298:	0610      	lsls	r0, r2, #24
 800029a:	d530      	bpl.n	80002fe <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	0751      	lsls	r1, r2, #29
 80002a0:	d52d      	bpl.n	80002fe <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002a4:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80002a6:	bf5e      	ittt	pl
 80002a8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002aa:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80002ae:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002b6:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002ba:	d00a      	beq.n	80002d2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002bc:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002be:	0550      	lsls	r0, r2, #21
 80002c0:	d416      	bmi.n	80002f0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002c2:	689a      	ldr	r2, [r3, #8]
 80002c4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002c8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002cc:	d110      	bne.n	80002f0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002ce:	68e2      	ldr	r2, [r4, #12]
 80002d0:	b972      	cbnz	r2, 80002f0 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002d8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80002da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002e0:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80002e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002e4:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002e6:	bf5e      	ittt	pl
 80002e8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002ea:	f043 0301 	orrpl.w	r3, r3, #1
 80002ee:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80002f0:	4620      	mov	r0, r4
 80002f2:	f000 fa77 	bl	80007e4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80002f6:	f06f 020c 	mvn.w	r2, #12
 80002fa:	6823      	ldr	r3, [r4, #0]
 80002fc:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80002fe:	6823      	ldr	r3, [r4, #0]
 8000300:	685a      	ldr	r2, [r3, #4]
 8000302:	0652      	lsls	r2, r2, #25
 8000304:	d50d      	bpl.n	8000322 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	07db      	lsls	r3, r3, #31
 800030a:	d50a      	bpl.n	8000322 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800030c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800030e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000314:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000316:	f7ff ff8e 	bl	8000236 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800031a:	f06f 0201 	mvn.w	r2, #1
 800031e:	6823      	ldr	r3, [r4, #0]
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	bd10      	pop	{r4, pc}

08000324 <HAL_ADC_ErrorCallback>:
{
 8000324:	4770      	bx	lr

08000326 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000326:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000328:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800032a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800032c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000330:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000332:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800033a:	f7ff fff3 	bl	8000324 <HAL_ADC_ErrorCallback>
 800033e:	bd08      	pop	{r3, pc}

08000340 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000340:	2300      	movs	r3, #0
{ 
 8000342:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000344:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000346:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800034a:	2b01      	cmp	r3, #1
 800034c:	d074      	beq.n	8000438 <HAL_ADC_ConfigChannel+0xf8>
 800034e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000350:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000352:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000356:	2d06      	cmp	r5, #6
 8000358:	6802      	ldr	r2, [r0, #0]
 800035a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800035e:	680c      	ldr	r4, [r1, #0]
 8000360:	d825      	bhi.n	80003ae <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000362:	442b      	add	r3, r5
 8000364:	251f      	movs	r5, #31
 8000366:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000368:	3b05      	subs	r3, #5
 800036a:	409d      	lsls	r5, r3
 800036c:	ea26 0505 	bic.w	r5, r6, r5
 8000370:	fa04 f303 	lsl.w	r3, r4, r3
 8000374:	432b      	orrs	r3, r5
 8000376:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000378:	2c09      	cmp	r4, #9
 800037a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800037e:	688d      	ldr	r5, [r1, #8]
 8000380:	d92f      	bls.n	80003e2 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000382:	2607      	movs	r6, #7
 8000384:	4423      	add	r3, r4
 8000386:	68d1      	ldr	r1, [r2, #12]
 8000388:	3b1e      	subs	r3, #30
 800038a:	409e      	lsls	r6, r3
 800038c:	ea21 0106 	bic.w	r1, r1, r6
 8000390:	fa05 f303 	lsl.w	r3, r5, r3
 8000394:	430b      	orrs	r3, r1
 8000396:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000398:	f1a4 0310 	sub.w	r3, r4, #16
 800039c:	2b01      	cmp	r3, #1
 800039e:	d92b      	bls.n	80003f8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003a0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	b002      	add	sp, #8
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003ae:	2d0c      	cmp	r5, #12
 80003b0:	d80b      	bhi.n	80003ca <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003b2:	442b      	add	r3, r5
 80003b4:	251f      	movs	r5, #31
 80003b6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003b8:	3b23      	subs	r3, #35	; 0x23
 80003ba:	409d      	lsls	r5, r3
 80003bc:	ea26 0505 	bic.w	r5, r6, r5
 80003c0:	fa04 f303 	lsl.w	r3, r4, r3
 80003c4:	432b      	orrs	r3, r5
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
 80003c8:	e7d6      	b.n	8000378 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003ca:	442b      	add	r3, r5
 80003cc:	251f      	movs	r5, #31
 80003ce:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003d0:	3b41      	subs	r3, #65	; 0x41
 80003d2:	409d      	lsls	r5, r3
 80003d4:	ea26 0505 	bic.w	r5, r6, r5
 80003d8:	fa04 f303 	lsl.w	r3, r4, r3
 80003dc:	432b      	orrs	r3, r5
 80003de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003e0:	e7ca      	b.n	8000378 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003e2:	2607      	movs	r6, #7
 80003e4:	6911      	ldr	r1, [r2, #16]
 80003e6:	4423      	add	r3, r4
 80003e8:	409e      	lsls	r6, r3
 80003ea:	ea21 0106 	bic.w	r1, r1, r6
 80003ee:	fa05 f303 	lsl.w	r3, r5, r3
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6113      	str	r3, [r2, #16]
 80003f6:	e7cf      	b.n	8000398 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <HAL_ADC_ConfigChannel+0xfc>)
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d116      	bne.n	800042c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003fe:	6893      	ldr	r3, [r2, #8]
 8000400:	021b      	lsls	r3, r3, #8
 8000402:	d4cd      	bmi.n	80003a0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000404:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000406:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800040c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800040e:	d1c7      	bne.n	80003a0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <HAL_ADC_ConfigChannel+0x100>)
 8000412:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <HAL_ADC_ConfigChannel+0x104>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	fbb3 f2f2 	udiv	r2, r3, r2
 800041a:	230a      	movs	r3, #10
 800041c:	4353      	muls	r3, r2
            wait_loop_index--;
 800041e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0bc      	beq.n	80003a0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000426:	9b01      	ldr	r3, [sp, #4]
 8000428:	3b01      	subs	r3, #1
 800042a:	e7f8      	b.n	800041e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800042c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000434:	2301      	movs	r3, #1
 8000436:	e7b4      	b.n	80003a2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000438:	2302      	movs	r3, #2
 800043a:	e7b5      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x68>
 800043c:	40012400 	.word	0x40012400
 8000440:	2000000c 	.word	0x2000000c
 8000444:	000f4240 	.word	0x000f4240

08000448 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000448:	2300      	movs	r3, #0
{
 800044a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800044c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800044e:	6803      	ldr	r3, [r0, #0]
{
 8000450:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000452:	689a      	ldr	r2, [r3, #8]
 8000454:	07d2      	lsls	r2, r2, #31
 8000456:	d502      	bpl.n	800045e <ADC_Enable+0x16>
  return HAL_OK;
 8000458:	2000      	movs	r0, #0
}
 800045a:	b002      	add	sp, #8
 800045c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	f042 0201 	orr.w	r2, r2, #1
 8000464:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <ADC_Enable+0x68>)
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <ADC_Enable+0x6c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000470:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000472:	9b01      	ldr	r3, [sp, #4]
 8000474:	b9c3      	cbnz	r3, 80004a8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000476:	f7ff feab 	bl	80001d0 <HAL_GetTick>
 800047a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800047c:	6823      	ldr	r3, [r4, #0]
 800047e:	689d      	ldr	r5, [r3, #8]
 8000480:	f015 0501 	ands.w	r5, r5, #1
 8000484:	d1e8      	bne.n	8000458 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000486:	f7ff fea3 	bl	80001d0 <HAL_GetTick>
 800048a:	1b80      	subs	r0, r0, r6
 800048c:	2802      	cmp	r0, #2
 800048e:	d9f5      	bls.n	800047c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000492:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800049c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800049e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004a6:	e7d8      	b.n	800045a <ADC_Enable+0x12>
      wait_loop_index--;
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	e7e0      	b.n	8000470 <ADC_Enable+0x28>
 80004ae:	bf00      	nop
 80004b0:	2000000c 	.word	0x2000000c
 80004b4:	000f4240 	.word	0x000f4240

080004b8 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 80004b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80004bc:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80004be:	2b01      	cmp	r3, #1
{
 80004c0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80004c2:	d058      	beq.n	8000576 <HAL_ADC_Start_IT+0xbe>
 80004c4:	2301      	movs	r3, #1
 80004c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004ca:	f7ff ffbd 	bl	8000448 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d14d      	bne.n	800056e <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 80004d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004d4:	4a29      	ldr	r2, [pc, #164]	; (800057c <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80004d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80004da:	f023 0301 	bic.w	r3, r3, #1
 80004de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d104      	bne.n	80004f4 <HAL_ADC_Start_IT+0x3c>
 80004ea:	4925      	ldr	r1, [pc, #148]	; (8000580 <HAL_ADC_Start_IT+0xc8>)
 80004ec:	684a      	ldr	r2, [r1, #4]
 80004ee:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80004f2:	d132      	bne.n	800055a <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004f6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80004fa:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004fc:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004fe:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000500:	bf41      	itttt	mi
 8000502:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000504:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000508:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800050c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800050e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000514:	bf1c      	itt	ne
 8000516:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000518:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800051c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800051e:	2200      	movs	r2, #0
 8000520:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000524:	f06f 0202 	mvn.w	r2, #2
 8000528:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	f042 0220 	orr.w	r2, r2, #32
 8000530:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000532:	689a      	ldr	r2, [r3, #8]
 8000534:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000538:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800053c:	d113      	bne.n	8000566 <HAL_ADC_Start_IT+0xae>
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <HAL_ADC_Start_IT+0xc4>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d105      	bne.n	8000550 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000544:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000548:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800054a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800054e:	d10a      	bne.n	8000566 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800055a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800055c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000560:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000562:	684a      	ldr	r2, [r1, #4]
 8000564:	e7cb      	b.n	80004fe <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000566:	689a      	ldr	r2, [r3, #8]
 8000568:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800056c:	e7f3      	b.n	8000556 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 800056e:	2300      	movs	r3, #0
 8000570:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000574:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000576:	2002      	movs	r0, #2
}
 8000578:	bd10      	pop	{r4, pc}
 800057a:	bf00      	nop
 800057c:	40012800 	.word	0x40012800
 8000580:	40012400 	.word	0x40012400

08000584 <HAL_ADC_Start_DMA>:
{
 8000584:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000588:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <HAL_ADC_Start_DMA+0x108>)
 800058c:	6802      	ldr	r2, [r0, #0]
{
 800058e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000590:	429a      	cmp	r2, r3
{
 8000592:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000594:	d002      	beq.n	800059c <HAL_ADC_Start_DMA+0x18>
 8000596:	493e      	ldr	r1, [pc, #248]	; (8000690 <HAL_ADC_Start_DMA+0x10c>)
 8000598:	428a      	cmp	r2, r1
 800059a:	d103      	bne.n	80005a4 <HAL_ADC_Start_DMA+0x20>
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80005a2:	d16e      	bne.n	8000682 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80005a4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d06c      	beq.n	8000686 <HAL_ADC_Start_DMA+0x102>
 80005ac:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80005ae:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80005b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80005b4:	f7ff ff48 	bl	8000448 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80005b8:	4606      	mov	r6, r0
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d15d      	bne.n	800067a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80005be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005c0:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80005c2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80005c8:	f020 0001 	bic.w	r0, r0, #1
 80005cc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005d0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80005d2:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005d4:	d104      	bne.n	80005e0 <HAL_ADC_Start_DMA+0x5c>
 80005d6:	4a2d      	ldr	r2, [pc, #180]	; (800068c <HAL_ADC_Start_DMA+0x108>)
 80005d8:	6853      	ldr	r3, [r2, #4]
 80005da:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80005de:	d13e      	bne.n	800065e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005e6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005e8:	684b      	ldr	r3, [r1, #4]
 80005ea:	055a      	lsls	r2, r3, #21
 80005ec:	d505      	bpl.n	80005fa <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005fc:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005fe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000602:	bf18      	it	ne
 8000604:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000606:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000608:	bf18      	it	ne
 800060a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800060e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000610:	2300      	movs	r3, #0
 8000612:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000618:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800061a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <HAL_ADC_Start_DMA+0x114>)
 800061e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <HAL_ADC_Start_DMA+0x118>)
 8000622:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000624:	f06f 0302 	mvn.w	r3, #2
 8000628:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800062c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000634:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000638:	4643      	mov	r3, r8
 800063a:	f000 f96d 	bl	8000918 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000646:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	bf0c      	ite	eq
 800064e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000652:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000656:	609a      	str	r2, [r3, #8]
}
 8000658:	4630      	mov	r0, r6
 800065a:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800065e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000664:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000666:	6853      	ldr	r3, [r2, #4]
 8000668:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800066a:	bf41      	itttt	mi
 800066c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800066e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000672:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000676:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000678:	e7bf      	b.n	80005fa <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800067a:	2300      	movs	r3, #0
 800067c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000680:	e7ea      	b.n	8000658 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000682:	2601      	movs	r6, #1
 8000684:	e7e8      	b.n	8000658 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000686:	2602      	movs	r6, #2
 8000688:	e7e6      	b.n	8000658 <HAL_ADC_Start_DMA+0xd4>
 800068a:	bf00      	nop
 800068c:	40012400 	.word	0x40012400
 8000690:	40012800 	.word	0x40012800
 8000694:	080001dd 	.word	0x080001dd
 8000698:	0800022d 	.word	0x0800022d
 800069c:	08000327 	.word	0x08000327

080006a0 <ADC_ConversionStop_Disable>:
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006a2:	6803      	ldr	r3, [r0, #0]
{
 80006a4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	07d2      	lsls	r2, r2, #31
 80006aa:	d401      	bmi.n	80006b0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80006ac:	2000      	movs	r0, #0
 80006ae:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	f022 0201 	bic.w	r2, r2, #1
 80006b6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80006b8:	f7ff fd8a 	bl	80001d0 <HAL_GetTick>
 80006bc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	07db      	lsls	r3, r3, #31
 80006c4:	d5f2      	bpl.n	80006ac <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80006c6:	f7ff fd83 	bl	80001d0 <HAL_GetTick>
 80006ca:	1b40      	subs	r0, r0, r5
 80006cc:	2802      	cmp	r0, #2
 80006ce:	d9f6      	bls.n	80006be <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006d2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006e2:	bd38      	pop	{r3, r4, r5, pc}

080006e4 <HAL_ADC_Init>:
{
 80006e4:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80006e6:	4604      	mov	r4, r0
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d071      	beq.n	80007d0 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006ee:	b923      	cbnz	r3, 80006fa <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80006f0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80006f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80006f6:	f001 fd25 	bl	8002144 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006fa:	4620      	mov	r0, r4
 80006fc:	f7ff ffd0 	bl	80006a0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000700:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000702:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000708:	d164      	bne.n	80007d4 <HAL_ADC_Init+0xf0>
 800070a:	2800      	cmp	r0, #0
 800070c:	d162      	bne.n	80007d4 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800070e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000710:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000714:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	f023 0302 	bic.w	r3, r3, #2
 800071a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800071e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000720:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000722:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000724:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000726:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800072a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800072e:	d038      	beq.n	80007a2 <HAL_ADC_Init+0xbe>
 8000730:	2901      	cmp	r1, #1
 8000732:	bf14      	ite	ne
 8000734:	4606      	movne	r6, r0
 8000736:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800073a:	6965      	ldr	r5, [r4, #20]
 800073c:	2d01      	cmp	r5, #1
 800073e:	d107      	bne.n	8000750 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000740:	2b00      	cmp	r3, #0
 8000742:	d130      	bne.n	80007a6 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000744:	69a3      	ldr	r3, [r4, #24]
 8000746:	3b01      	subs	r3, #1
 8000748:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800074c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000750:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000752:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000756:	685d      	ldr	r5, [r3, #4]
 8000758:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800075c:	ea45 0506 	orr.w	r5, r5, r6
 8000760:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000762:	689e      	ldr	r6, [r3, #8]
 8000764:	4d1d      	ldr	r5, [pc, #116]	; (80007dc <HAL_ADC_Init+0xf8>)
 8000766:	ea05 0506 	and.w	r5, r5, r6
 800076a:	ea45 0502 	orr.w	r5, r5, r2
 800076e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000770:	d001      	beq.n	8000776 <HAL_ADC_Init+0x92>
 8000772:	2901      	cmp	r1, #1
 8000774:	d120      	bne.n	80007b8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000776:	6921      	ldr	r1, [r4, #16]
 8000778:	3901      	subs	r1, #1
 800077a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800077c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800077e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000782:	4329      	orrs	r1, r5
 8000784:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000786:	6899      	ldr	r1, [r3, #8]
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_ADC_Init+0xfc>)
 800078a:	400b      	ands	r3, r1
 800078c:	429a      	cmp	r2, r3
 800078e:	d115      	bne.n	80007bc <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000790:	2300      	movs	r3, #0
 8000792:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000796:	f023 0303 	bic.w	r3, r3, #3
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	62a3      	str	r3, [r4, #40]	; 0x28
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007a2:	460e      	mov	r6, r1
 80007a4:	e7c9      	b.n	800073a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007b6:	e7cb      	b.n	8000750 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80007b8:	2100      	movs	r1, #0
 80007ba:	e7df      	b.n	800077c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80007bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007be:	f023 0312 	bic.w	r3, r3, #18
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
}
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80007da:	e7f9      	b.n	80007d0 <HAL_ADC_Init+0xec>
 80007dc:	ffe1f7fd 	.word	0xffe1f7fd
 80007e0:	ff1f0efe 	.word	0xff1f0efe

080007e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007e4:	4770      	bx	lr
	...

080007e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007ea:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000802:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000804:	60d3      	str	r3, [r2, #12]
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	68dc      	ldr	r4, [r3, #12]
 8000812:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000816:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	2b04      	cmp	r3, #4
 800081e:	bf28      	it	cs
 8000820:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000828:	bf98      	it	ls
 800082a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	fa05 f303 	lsl.w	r3, r5, r3
 8000830:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000834:	bf88      	it	hi
 8000836:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4019      	ands	r1, r3
 800083a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	fa05 f404 	lsl.w	r4, r5, r4
 8000840:	3c01      	subs	r4, #1
 8000842:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000844:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000846:	ea42 0201 	orr.w	r2, r2, r1
 800084a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	bfaf      	iteee	ge
 8000850:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	4b06      	ldrlt	r3, [pc, #24]	; (8000870 <HAL_NVIC_SetPriority+0x64>)
 8000856:	f000 000f 	andlt.w	r0, r0, #15
 800085a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	bfa5      	ittet	ge
 800085e:	b2d2      	uxtbge	r2, r2
 8000860:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800086a:	bd30      	pop	{r4, r5, pc}
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	e000ed14 	.word	0xe000ed14

08000874 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000874:	2301      	movs	r3, #1
 8000876:	0942      	lsrs	r2, r0, #5
 8000878:	f000 001f 	and.w	r0, r0, #31
 800087c:	fa03 f000 	lsl.w	r0, r3, r0
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <HAL_NVIC_EnableIRQ+0x14>)
 8000882:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800088c:	3801      	subs	r0, #1
 800088e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000892:	d20a      	bcs.n	80008aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008b8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008ba:	b330      	cbz	r0, 800090a <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008bc:	2214      	movs	r2, #20
 80008be:	6801      	ldr	r1, [r0, #0]
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008c2:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008c4:	440b      	add	r3, r1
 80008c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80008d0:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80008d2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80008d4:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008d6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80008da:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008dc:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008de:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e2:	4323      	orrs	r3, r4
 80008e4:	6904      	ldr	r4, [r0, #16]
 80008e6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e8:	6944      	ldr	r4, [r0, #20]
 80008ea:	4323      	orrs	r3, r4
 80008ec:	6984      	ldr	r4, [r0, #24]
 80008ee:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f0:	69c4      	ldr	r4, [r0, #28]
 80008f2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80008f4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008f6:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008f8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008fa:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80008fc:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000900:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000902:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000906:	4618      	mov	r0, r3
 8000908:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800090a:	2001      	movs	r0, #1
}
 800090c:	bd10      	pop	{r4, pc}
 800090e:	bf00      	nop
 8000910:	bffdfff8 	.word	0xbffdfff8
 8000914:	40020000 	.word	0x40020000

08000918 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800091a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800091e:	2c01      	cmp	r4, #1
 8000920:	d035      	beq.n	800098e <HAL_DMA_Start_IT+0x76>
 8000922:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000924:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000928:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800092c:	42a5      	cmp	r5, r4
 800092e:	f04f 0600 	mov.w	r6, #0
 8000932:	f04f 0402 	mov.w	r4, #2
 8000936:	d128      	bne.n	800098a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000938:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800093c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800093e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000940:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000942:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000944:	f026 0601 	bic.w	r6, r6, #1
 8000948:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800094a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800094c:	40bd      	lsls	r5, r7
 800094e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000950:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000952:	6843      	ldr	r3, [r0, #4]
 8000954:	6805      	ldr	r5, [r0, #0]
 8000956:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800095a:	bf0b      	itete	eq
 800095c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800095e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000960:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000962:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000964:	b14b      	cbz	r3, 800097a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800096c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800096e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000970:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	602b      	str	r3, [r5, #0]
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	f023 0304 	bic.w	r3, r3, #4
 8000980:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	f043 030a 	orr.w	r3, r3, #10
 8000988:	e7f0      	b.n	800096c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800098a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800098e:	2002      	movs	r0, #2
}
 8000990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000994 <HAL_DMA_IRQHandler>:
{
 8000994:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000996:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000998:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800099a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800099c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800099e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009a0:	4095      	lsls	r5, r2
 80009a2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80009a4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009a6:	d032      	beq.n	8000a0e <HAL_DMA_IRQHandler+0x7a>
 80009a8:	074d      	lsls	r5, r1, #29
 80009aa:	d530      	bpl.n	8000a0e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009b0:	bf5e      	ittt	pl
 80009b2:	681a      	ldrpl	r2, [r3, #0]
 80009b4:	f022 0204 	bicpl.w	r2, r2, #4
 80009b8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009ba:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <HAL_DMA_IRQHandler+0x120>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d019      	beq.n	80009f4 <HAL_DMA_IRQHandler+0x60>
 80009c0:	3214      	adds	r2, #20
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d018      	beq.n	80009f8 <HAL_DMA_IRQHandler+0x64>
 80009c6:	3214      	adds	r2, #20
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d017      	beq.n	80009fc <HAL_DMA_IRQHandler+0x68>
 80009cc:	3214      	adds	r2, #20
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d017      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x6e>
 80009d2:	3214      	adds	r2, #20
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d017      	beq.n	8000a08 <HAL_DMA_IRQHandler+0x74>
 80009d8:	3214      	adds	r2, #20
 80009da:	4293      	cmp	r3, r2
 80009dc:	bf0c      	ite	eq
 80009de:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80009e2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80009e6:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <HAL_DMA_IRQHandler+0x124>)
 80009e8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80009ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d05e      	beq.n	8000aae <HAL_DMA_IRQHandler+0x11a>
}
 80009f0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80009f2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009f4:	2304      	movs	r3, #4
 80009f6:	e7f6      	b.n	80009e6 <HAL_DMA_IRQHandler+0x52>
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	e7f4      	b.n	80009e6 <HAL_DMA_IRQHandler+0x52>
 80009fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a00:	e7f1      	b.n	80009e6 <HAL_DMA_IRQHandler+0x52>
 8000a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a06:	e7ee      	b.n	80009e6 <HAL_DMA_IRQHandler+0x52>
 8000a08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a0c:	e7eb      	b.n	80009e6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000a0e:	2502      	movs	r5, #2
 8000a10:	4095      	lsls	r5, r2
 8000a12:	4225      	tst	r5, r4
 8000a14:	d035      	beq.n	8000a82 <HAL_DMA_IRQHandler+0xee>
 8000a16:	078d      	lsls	r5, r1, #30
 8000a18:	d533      	bpl.n	8000a82 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	0694      	lsls	r4, r2, #26
 8000a1e:	d406      	bmi.n	8000a2e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	f022 020a 	bic.w	r2, r2, #10
 8000a26:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <HAL_DMA_IRQHandler+0x120>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d019      	beq.n	8000a68 <HAL_DMA_IRQHandler+0xd4>
 8000a34:	3214      	adds	r2, #20
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d018      	beq.n	8000a6c <HAL_DMA_IRQHandler+0xd8>
 8000a3a:	3214      	adds	r2, #20
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d017      	beq.n	8000a70 <HAL_DMA_IRQHandler+0xdc>
 8000a40:	3214      	adds	r2, #20
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d017      	beq.n	8000a76 <HAL_DMA_IRQHandler+0xe2>
 8000a46:	3214      	adds	r2, #20
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d017      	beq.n	8000a7c <HAL_DMA_IRQHandler+0xe8>
 8000a4c:	3214      	adds	r2, #20
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	bf0c      	ite	eq
 8000a52:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000a56:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_DMA_IRQHandler+0x124>)
 8000a5c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000a64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a66:	e7c1      	b.n	80009ec <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e7f6      	b.n	8000a5a <HAL_DMA_IRQHandler+0xc6>
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	e7f4      	b.n	8000a5a <HAL_DMA_IRQHandler+0xc6>
 8000a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a74:	e7f1      	b.n	8000a5a <HAL_DMA_IRQHandler+0xc6>
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	e7ee      	b.n	8000a5a <HAL_DMA_IRQHandler+0xc6>
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	e7eb      	b.n	8000a5a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a82:	2508      	movs	r5, #8
 8000a84:	4095      	lsls	r5, r2
 8000a86:	4225      	tst	r5, r4
 8000a88:	d011      	beq.n	8000aae <HAL_DMA_IRQHandler+0x11a>
 8000a8a:	0709      	lsls	r1, r1, #28
 8000a8c:	d50f      	bpl.n	8000aae <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a8e:	6819      	ldr	r1, [r3, #0]
 8000a90:	f021 010e 	bic.w	r1, r1, #14
 8000a94:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a96:	2301      	movs	r3, #1
 8000a98:	fa03 f202 	lsl.w	r2, r3, r2
 8000a9c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a9e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000aa0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000aaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000aac:	e79e      	b.n	80009ec <HAL_DMA_IRQHandler+0x58>
}
 8000aae:	bc70      	pop	{r4, r5, r6}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40020008 	.word	0x40020008
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ac0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ac2:	4616      	mov	r6, r2
 8000ac4:	4b65      	ldr	r3, [pc, #404]	; (8000c5c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000c6c <HAL_GPIO_Init+0x1b0>
 8000aca:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000c70 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000ace:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ad4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d17f      	bne.n	8000be0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000ae0:	684d      	ldr	r5, [r1, #4]
 8000ae2:	2d12      	cmp	r5, #18
 8000ae4:	f000 80af 	beq.w	8000c46 <HAL_GPIO_Init+0x18a>
 8000ae8:	f200 8088 	bhi.w	8000bfc <HAL_GPIO_Init+0x140>
 8000aec:	2d02      	cmp	r5, #2
 8000aee:	f000 80a7 	beq.w	8000c40 <HAL_GPIO_Init+0x184>
 8000af2:	d87c      	bhi.n	8000bee <HAL_GPIO_Init+0x132>
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	f000 808e 	beq.w	8000c16 <HAL_GPIO_Init+0x15a>
 8000afa:	2d01      	cmp	r5, #1
 8000afc:	f000 809e 	beq.w	8000c3c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b00:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b04:	2cff      	cmp	r4, #255	; 0xff
 8000b06:	bf93      	iteet	ls
 8000b08:	4682      	movls	sl, r0
 8000b0a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b0e:	3d08      	subhi	r5, #8
 8000b10:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b14:	bf92      	itee	ls
 8000b16:	00b5      	lslls	r5, r6, #2
 8000b18:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b1c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1e:	fa09 f805 	lsl.w	r8, r9, r5
 8000b22:	ea2b 0808 	bic.w	r8, fp, r8
 8000b26:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b2a:	bf88      	it	hi
 8000b2c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b30:	ea48 0505 	orr.w	r5, r8, r5
 8000b34:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b38:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b3c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b40:	d04e      	beq.n	8000be0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b42:	4d47      	ldr	r5, [pc, #284]	; (8000c60 <HAL_GPIO_Init+0x1a4>)
 8000b44:	4f46      	ldr	r7, [pc, #280]	; (8000c60 <HAL_GPIO_Init+0x1a4>)
 8000b46:	69ad      	ldr	r5, [r5, #24]
 8000b48:	f026 0803 	bic.w	r8, r6, #3
 8000b4c:	f045 0501 	orr.w	r5, r5, #1
 8000b50:	61bd      	str	r5, [r7, #24]
 8000b52:	69bd      	ldr	r5, [r7, #24]
 8000b54:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000b58:	f005 0501 	and.w	r5, r5, #1
 8000b5c:	9501      	str	r5, [sp, #4]
 8000b5e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b62:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000b6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b70:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b74:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b78:	4d3a      	ldr	r5, [pc, #232]	; (8000c64 <HAL_GPIO_Init+0x1a8>)
 8000b7a:	42a8      	cmp	r0, r5
 8000b7c:	d068      	beq.n	8000c50 <HAL_GPIO_Init+0x194>
 8000b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b82:	42a8      	cmp	r0, r5
 8000b84:	d066      	beq.n	8000c54 <HAL_GPIO_Init+0x198>
 8000b86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b8a:	42a8      	cmp	r0, r5
 8000b8c:	d064      	beq.n	8000c58 <HAL_GPIO_Init+0x19c>
 8000b8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b92:	42a8      	cmp	r0, r5
 8000b94:	bf0c      	ite	eq
 8000b96:	2503      	moveq	r5, #3
 8000b98:	2504      	movne	r5, #4
 8000b9a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b9e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000ba2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000bac:	bf14      	ite	ne
 8000bae:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb0:	43a5      	biceq	r5, r4
 8000bb2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000bba:	bf14      	ite	ne
 8000bbc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbe:	43a5      	biceq	r5, r4
 8000bc0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc8:	bf14      	ite	ne
 8000bca:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bcc:	43a5      	biceq	r5, r4
 8000bce:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd6:	bf14      	ite	ne
 8000bd8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bda:	ea25 0404 	biceq.w	r4, r5, r4
 8000bde:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000be0:	3601      	adds	r6, #1
 8000be2:	2e10      	cmp	r6, #16
 8000be4:	f47f af73 	bne.w	8000ace <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000be8:	b003      	add	sp, #12
 8000bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000bee:	2d03      	cmp	r5, #3
 8000bf0:	d022      	beq.n	8000c38 <HAL_GPIO_Init+0x17c>
 8000bf2:	2d11      	cmp	r5, #17
 8000bf4:	d184      	bne.n	8000b00 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf6:	68ca      	ldr	r2, [r1, #12]
 8000bf8:	3204      	adds	r2, #4
          break;
 8000bfa:	e781      	b.n	8000b00 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000bfc:	4f1a      	ldr	r7, [pc, #104]	; (8000c68 <HAL_GPIO_Init+0x1ac>)
 8000bfe:	42bd      	cmp	r5, r7
 8000c00:	d009      	beq.n	8000c16 <HAL_GPIO_Init+0x15a>
 8000c02:	d812      	bhi.n	8000c2a <HAL_GPIO_Init+0x16e>
 8000c04:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000c74 <HAL_GPIO_Init+0x1b8>
 8000c08:	454d      	cmp	r5, r9
 8000c0a:	d004      	beq.n	8000c16 <HAL_GPIO_Init+0x15a>
 8000c0c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c10:	454d      	cmp	r5, r9
 8000c12:	f47f af75 	bne.w	8000b00 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c16:	688a      	ldr	r2, [r1, #8]
 8000c18:	b1c2      	cbz	r2, 8000c4c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c1c:	bf0c      	ite	eq
 8000c1e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c22:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c26:	2208      	movs	r2, #8
 8000c28:	e76a      	b.n	8000b00 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c2a:	4575      	cmp	r5, lr
 8000c2c:	d0f3      	beq.n	8000c16 <HAL_GPIO_Init+0x15a>
 8000c2e:	4565      	cmp	r5, ip
 8000c30:	d0f1      	beq.n	8000c16 <HAL_GPIO_Init+0x15a>
 8000c32:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000c78 <HAL_GPIO_Init+0x1bc>
 8000c36:	e7eb      	b.n	8000c10 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e761      	b.n	8000b00 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c3c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000c3e:	e75f      	b.n	8000b00 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c40:	68ca      	ldr	r2, [r1, #12]
 8000c42:	3208      	adds	r2, #8
          break;
 8000c44:	e75c      	b.n	8000b00 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c46:	68ca      	ldr	r2, [r1, #12]
 8000c48:	320c      	adds	r2, #12
          break;
 8000c4a:	e759      	b.n	8000b00 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	e757      	b.n	8000b00 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c50:	2500      	movs	r5, #0
 8000c52:	e7a2      	b.n	8000b9a <HAL_GPIO_Init+0xde>
 8000c54:	2501      	movs	r5, #1
 8000c56:	e7a0      	b.n	8000b9a <HAL_GPIO_Init+0xde>
 8000c58:	2502      	movs	r5, #2
 8000c5a:	e79e      	b.n	8000b9a <HAL_GPIO_Init+0xde>
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800
 8000c68:	10210000 	.word	0x10210000
 8000c6c:	10310000 	.word	0x10310000
 8000c70:	10320000 	.word	0x10320000
 8000c74:	10110000 	.word	0x10110000
 8000c78:	10220000 	.word	0x10220000

08000c7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c7c:	b10a      	cbz	r2, 8000c82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c7e:	6101      	str	r1, [r0, #16]
 8000c80:	4770      	bx	lr
 8000c82:	0409      	lsls	r1, r1, #16
 8000c84:	e7fb      	b.n	8000c7e <HAL_GPIO_WritePin+0x2>

08000c86 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000c86:	68c3      	ldr	r3, [r0, #12]
 8000c88:	4059      	eors	r1, r3
 8000c8a:	60c1      	str	r1, [r0, #12]
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c90:	6803      	ldr	r3, [r0, #0]
{
 8000c92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	07db      	lsls	r3, r3, #31
{
 8000c98:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	d410      	bmi.n	8000cbe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	079f      	lsls	r7, r3, #30
 8000ca0:	d45e      	bmi.n	8000d60 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca2:	682b      	ldr	r3, [r5, #0]
 8000ca4:	0719      	lsls	r1, r3, #28
 8000ca6:	f100 8095 	bmi.w	8000dd4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	075a      	lsls	r2, r3, #29
 8000cae:	f100 80bf 	bmi.w	8000e30 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cb2:	69ea      	ldr	r2, [r5, #28]
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 812d 	bne.w	8000f14 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e014      	b.n	8000ce8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cbe:	4c90      	ldr	r4, [pc, #576]	; (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	d007      	beq.n	8000cda <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cca:	6863      	ldr	r3, [r4, #4]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d10c      	bne.n	8000cee <HAL_RCC_OscConfig+0x5e>
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	03de      	lsls	r6, r3, #15
 8000cd8:	d509      	bpl.n	8000cee <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	039c      	lsls	r4, r3, #14
 8000cde:	d5dd      	bpl.n	8000c9c <HAL_RCC_OscConfig+0xc>
 8000ce0:	686b      	ldr	r3, [r5, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1da      	bne.n	8000c9c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
}
 8000ce8:	b002      	add	sp, #8
 8000cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	686b      	ldr	r3, [r5, #4]
 8000cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf4:	d110      	bne.n	8000d18 <HAL_RCC_OscConfig+0x88>
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fa67 	bl	80001d0 <HAL_GetTick>
 8000d02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	0398      	lsls	r0, r3, #14
 8000d08:	d4c8      	bmi.n	8000c9c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fa61 	bl	80001d0 <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	2864      	cmp	r0, #100	; 0x64
 8000d12:	d9f7      	bls.n	8000d04 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d14:	2003      	movs	r0, #3
 8000d16:	e7e7      	b.n	8000ce8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d18:	b99b      	cbnz	r3, 8000d42 <HAL_RCC_OscConfig+0xb2>
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fa51 	bl	80001d0 <HAL_GetTick>
 8000d2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	0399      	lsls	r1, r3, #14
 8000d34:	d5b2      	bpl.n	8000c9c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d36:	f7ff fa4b 	bl	80001d0 <HAL_GetTick>
 8000d3a:	1b80      	subs	r0, r0, r6
 8000d3c:	2864      	cmp	r0, #100	; 0x64
 8000d3e:	d9f7      	bls.n	8000d30 <HAL_RCC_OscConfig+0xa0>
 8000d40:	e7e8      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	d103      	bne.n	8000d52 <HAL_RCC_OscConfig+0xc2>
 8000d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4e:	6023      	str	r3, [r4, #0]
 8000d50:	e7d1      	b.n	8000cf6 <HAL_RCC_OscConfig+0x66>
 8000d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d56:	6023      	str	r3, [r4, #0]
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	e7cd      	b.n	8000cfc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d60:	4c67      	ldr	r4, [pc, #412]	; (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000d62:	6863      	ldr	r3, [r4, #4]
 8000d64:	f013 0f0c 	tst.w	r3, #12
 8000d68:	d007      	beq.n	8000d7a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d6a:	6863      	ldr	r3, [r4, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d110      	bne.n	8000d96 <HAL_RCC_OscConfig+0x106>
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	03da      	lsls	r2, r3, #15
 8000d78:	d40d      	bmi.n	8000d96 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	079b      	lsls	r3, r3, #30
 8000d7e:	d502      	bpl.n	8000d86 <HAL_RCC_OscConfig+0xf6>
 8000d80:	692b      	ldr	r3, [r5, #16]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d1af      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	696a      	ldr	r2, [r5, #20]
 8000d8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d92:	6023      	str	r3, [r4, #0]
 8000d94:	e785      	b.n	8000ca2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d96:	692a      	ldr	r2, [r5, #16]
 8000d98:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <HAL_RCC_OscConfig+0x274>)
 8000d9a:	b16a      	cbz	r2, 8000db8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da0:	f7ff fa16 	bl	80001d0 <HAL_GetTick>
 8000da4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	079f      	lsls	r7, r3, #30
 8000daa:	d4ec      	bmi.n	8000d86 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fa10 	bl	80001d0 <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f7      	bls.n	8000da6 <HAL_RCC_OscConfig+0x116>
 8000db6:	e7ad      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000db8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dba:	f7ff fa09 	bl	80001d0 <HAL_GetTick>
 8000dbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	0798      	lsls	r0, r3, #30
 8000dc4:	f57f af6d 	bpl.w	8000ca2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fa02 	bl	80001d0 <HAL_GetTick>
 8000dcc:	1b80      	subs	r0, r0, r6
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9f6      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x130>
 8000dd2:	e79f      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd4:	69aa      	ldr	r2, [r5, #24]
 8000dd6:	4c4a      	ldr	r4, [pc, #296]	; (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000dd8:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <HAL_RCC_OscConfig+0x278>)
 8000dda:	b1da      	cbz	r2, 8000e14 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000de0:	f7ff f9f6 	bl	80001d0 <HAL_GetTick>
 8000de4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de8:	079b      	lsls	r3, r3, #30
 8000dea:	d50d      	bpl.n	8000e08 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000dec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <HAL_RCC_OscConfig+0x27c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000df8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000dfa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000dfc:	9b01      	ldr	r3, [sp, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f9      	bne.n	8000dfa <HAL_RCC_OscConfig+0x16a>
 8000e06:	e750      	b.n	8000caa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e08:	f7ff f9e2 	bl	80001d0 <HAL_GetTick>
 8000e0c:	1b80      	subs	r0, r0, r6
 8000e0e:	2802      	cmp	r0, #2
 8000e10:	d9e9      	bls.n	8000de6 <HAL_RCC_OscConfig+0x156>
 8000e12:	e77f      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e16:	f7ff f9db 	bl	80001d0 <HAL_GetTick>
 8000e1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e1e:	079f      	lsls	r7, r3, #30
 8000e20:	f57f af43 	bpl.w	8000caa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e24:	f7ff f9d4 	bl	80001d0 <HAL_GetTick>
 8000e28:	1b80      	subs	r0, r0, r6
 8000e2a:	2802      	cmp	r0, #2
 8000e2c:	d9f6      	bls.n	8000e1c <HAL_RCC_OscConfig+0x18c>
 8000e2e:	e771      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e30:	4c33      	ldr	r4, [pc, #204]	; (8000f00 <HAL_RCC_OscConfig+0x270>)
 8000e32:	69e3      	ldr	r3, [r4, #28]
 8000e34:	00d8      	lsls	r0, r3, #3
 8000e36:	d424      	bmi.n	8000e82 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e38:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	69e3      	ldr	r3, [r4, #28]
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61e3      	str	r3, [r4, #28]
 8000e42:	69e3      	ldr	r3, [r4, #28]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4e30      	ldr	r6, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x280>)
 8000e4e:	6833      	ldr	r3, [r6, #0]
 8000e50:	05d9      	lsls	r1, r3, #23
 8000e52:	d518      	bpl.n	8000e86 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e54:	68eb      	ldr	r3, [r5, #12]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d126      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x218>
 8000e5a:	6a23      	ldr	r3, [r4, #32]
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e62:	f7ff f9b5 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e66:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e6a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6c:	6a23      	ldr	r3, [r4, #32]
 8000e6e:	079b      	lsls	r3, r3, #30
 8000e70:	d53f      	bpl.n	8000ef2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e72:	2f00      	cmp	r7, #0
 8000e74:	f43f af1d 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e78:	69e3      	ldr	r3, [r4, #28]
 8000e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	61e3      	str	r3, [r4, #28]
 8000e80:	e717      	b.n	8000cb2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e82:	2700      	movs	r7, #0
 8000e84:	e7e2      	b.n	8000e4c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e86:	6833      	ldr	r3, [r6, #0]
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e8e:	f7ff f99f 	bl	80001d0 <HAL_GetTick>
 8000e92:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	6833      	ldr	r3, [r6, #0]
 8000e96:	05da      	lsls	r2, r3, #23
 8000e98:	d4dc      	bmi.n	8000e54 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9a:	f7ff f999 	bl	80001d0 <HAL_GetTick>
 8000e9e:	eba0 0008 	sub.w	r0, r0, r8
 8000ea2:	2864      	cmp	r0, #100	; 0x64
 8000ea4:	d9f6      	bls.n	8000e94 <HAL_RCC_OscConfig+0x204>
 8000ea6:	e735      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	b9ab      	cbnz	r3, 8000ed6 <HAL_RCC_OscConfig+0x246>
 8000eaa:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6223      	str	r3, [r4, #32]
 8000eb6:	6a23      	ldr	r3, [r4, #32]
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ebe:	f7ff f987 	bl	80001d0 <HAL_GetTick>
 8000ec2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	6a23      	ldr	r3, [r4, #32]
 8000ec6:	0798      	lsls	r0, r3, #30
 8000ec8:	d5d3      	bpl.n	8000e72 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff f981 	bl	80001d0 <HAL_GetTick>
 8000ece:	1b80      	subs	r0, r0, r6
 8000ed0:	4540      	cmp	r0, r8
 8000ed2:	d9f7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x234>
 8000ed4:	e71e      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	6a23      	ldr	r3, [r4, #32]
 8000eda:	d103      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x254>
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6223      	str	r3, [r4, #32]
 8000ee2:	e7ba      	b.n	8000e5a <HAL_RCC_OscConfig+0x1ca>
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6223      	str	r3, [r4, #32]
 8000eea:	6a23      	ldr	r3, [r4, #32]
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	e7b6      	b.n	8000e60 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff f96d 	bl	80001d0 <HAL_GetTick>
 8000ef6:	eba0 0008 	sub.w	r0, r0, r8
 8000efa:	42b0      	cmp	r0, r6
 8000efc:	d9b6      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1dc>
 8000efe:	e709      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42420000 	.word	0x42420000
 8000f08:	42420480 	.word	0x42420480
 8000f0c:	2000000c 	.word	0x2000000c
 8000f10:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	4c22      	ldr	r4, [pc, #136]	; (8000fa0 <HAL_RCC_OscConfig+0x310>)
 8000f16:	6863      	ldr	r3, [r4, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	f43f aee2 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x56>
 8000f22:	2300      	movs	r3, #0
 8000f24:	4e1f      	ldr	r6, [pc, #124]	; (8000fa4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f26:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f28:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2a:	d12b      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f2c:	f7ff f950 	bl	80001d0 <HAL_GetTick>
 8000f30:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	0199      	lsls	r1, r3, #6
 8000f36:	d41f      	bmi.n	8000f78 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f38:	6a2b      	ldr	r3, [r5, #32]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d105      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f40:	6862      	ldr	r2, [r4, #4]
 8000f42:	68a9      	ldr	r1, [r5, #8]
 8000f44:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f4e:	6862      	ldr	r2, [r4, #4]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f5e:	f7ff f937 	bl	80001d0 <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	019a      	lsls	r2, r3, #6
 8000f68:	f53f aea7 	bmi.w	8000cba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff f930 	bl	80001d0 <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f6      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2d4>
 8000f76:	e6cd      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f78:	f7ff f92a 	bl	80001d0 <HAL_GetTick>
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9d7      	bls.n	8000f32 <HAL_RCC_OscConfig+0x2a2>
 8000f82:	e6c7      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f84:	f7ff f924 	bl	80001d0 <HAL_GetTick>
 8000f88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	f57f ae94 	bpl.w	8000cba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff f91d 	bl	80001d0 <HAL_GetTick>
 8000f96:	1b40      	subs	r0, r0, r5
 8000f98:	2802      	cmp	r0, #2
 8000f9a:	d9f6      	bls.n	8000f8a <HAL_RCC_OscConfig+0x2fa>
 8000f9c:	e6ba      	b.n	8000d14 <HAL_RCC_OscConfig+0x84>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	42420060 	.word	0x42420060

08000fa8 <HAL_RCC_GetSysClockFreq>:
{
 8000fa8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fae:	ac02      	add	r4, sp, #8
 8000fb0:	f103 0510 	add.w	r5, r3, #16
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	c203      	stmia	r2!, {r0, r1}
 8000fbe:	42ab      	cmp	r3, r5
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	d1f7      	bne.n	8000fb4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fca:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fcc:	4911      	ldr	r1, [pc, #68]	; (8001014 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fce:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fd2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fd4:	f003 020c 	and.w	r2, r3, #12
 8000fd8:	2a08      	cmp	r2, #8
 8000fda:	d117      	bne.n	800100c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fdc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fe0:	a806      	add	r0, sp, #24
 8000fe2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fe4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fe6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fea:	d50c      	bpl.n	8001006 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fec:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fee:	480a      	ldr	r0, [pc, #40]	; (8001018 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ff0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ff4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ff6:	aa06      	add	r2, sp, #24
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ffe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001002:	b007      	add	sp, #28
 8001004:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_RCC_GetSysClockFreq+0x74>)
 8001008:	4350      	muls	r0, r2
 800100a:	e7fa      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800100e:	e7f8      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x5a>
 8001010:	0800245c 	.word	0x0800245c
 8001014:	40021000 	.word	0x40021000
 8001018:	007a1200 	.word	0x007a1200
 800101c:	003d0900 	.word	0x003d0900

08001020 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001020:	4a54      	ldr	r2, [pc, #336]	; (8001174 <HAL_RCC_ClockConfig+0x154>)
{
 8001022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001026:	6813      	ldr	r3, [r2, #0]
{
 8001028:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	428b      	cmp	r3, r1
{
 8001030:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001032:	d32a      	bcc.n	800108a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001034:	6829      	ldr	r1, [r5, #0]
 8001036:	078c      	lsls	r4, r1, #30
 8001038:	d434      	bmi.n	80010a4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103a:	07ca      	lsls	r2, r1, #31
 800103c:	d447      	bmi.n	80010ce <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800103e:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <HAL_RCC_ClockConfig+0x154>)
 8001040:	6813      	ldr	r3, [r2, #0]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	429e      	cmp	r6, r3
 8001048:	f0c0 8082 	bcc.w	8001150 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	682a      	ldr	r2, [r5, #0]
 800104e:	4c4a      	ldr	r4, [pc, #296]	; (8001178 <HAL_RCC_ClockConfig+0x158>)
 8001050:	f012 0f04 	tst.w	r2, #4
 8001054:	f040 8087 	bne.w	8001166 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001058:	0713      	lsls	r3, r2, #28
 800105a:	d506      	bpl.n	800106a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	692a      	ldr	r2, [r5, #16]
 8001060:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001064:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001068:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800106a:	f7ff ff9d 	bl	8000fa8 <HAL_RCC_GetSysClockFreq>
 800106e:	6863      	ldr	r3, [r4, #4]
 8001070:	4a42      	ldr	r2, [pc, #264]	; (800117c <HAL_RCC_ClockConfig+0x15c>)
 8001072:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	40d8      	lsrs	r0, r3
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <HAL_RCC_ClockConfig+0x160>)
 800107c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff f864 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001084:	2000      	movs	r0, #0
}
 8001086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	f023 0307 	bic.w	r3, r3, #7
 8001090:	430b      	orrs	r3, r1
 8001092:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	4299      	cmp	r1, r3
 800109c:	d0ca      	beq.n	8001034 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010aa:	bf1e      	ittt	ne
 80010ac:	685a      	ldrne	r2, [r3, #4]
 80010ae:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80010b2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b6:	bf42      	ittt	mi
 80010b8:	685a      	ldrmi	r2, [r3, #4]
 80010ba:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010be:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	68a8      	ldr	r0, [r5, #8]
 80010c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010c8:	4302      	orrs	r2, r0
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	e7b5      	b.n	800103a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	686a      	ldr	r2, [r5, #4]
 80010d0:	4c29      	ldr	r4, [pc, #164]	; (8001178 <HAL_RCC_ClockConfig+0x158>)
 80010d2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d6:	d11c      	bne.n	8001112 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	d0df      	beq.n	800109e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010de:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e4:	f023 0303 	bic.w	r3, r3, #3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010ec:	f7ff f870 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010f2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d114      	bne.n	8001122 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f8:	6863      	ldr	r3, [r4, #4]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d09d      	beq.n	800103e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f7ff f865 	bl	80001d0 <HAL_GetTick>
 8001106:	1bc0      	subs	r0, r0, r7
 8001108:	4540      	cmp	r0, r8
 800110a:	d9f5      	bls.n	80010f8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 800110c:	2003      	movs	r0, #3
 800110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001112:	2a02      	cmp	r2, #2
 8001114:	d102      	bne.n	800111c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800111a:	e7df      	b.n	80010dc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	f013 0f02 	tst.w	r3, #2
 8001120:	e7dc      	b.n	80010dc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001122:	2b02      	cmp	r3, #2
 8001124:	d10f      	bne.n	8001146 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	2b08      	cmp	r3, #8
 800112e:	d086      	beq.n	800103e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f7ff f84e 	bl	80001d0 <HAL_GetTick>
 8001134:	1bc0      	subs	r0, r0, r7
 8001136:	4540      	cmp	r0, r8
 8001138:	d9f5      	bls.n	8001126 <HAL_RCC_ClockConfig+0x106>
 800113a:	e7e7      	b.n	800110c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff f848 	bl	80001d0 <HAL_GetTick>
 8001140:	1bc0      	subs	r0, r0, r7
 8001142:	4540      	cmp	r0, r8
 8001144:	d8e2      	bhi.n	800110c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	f013 0f0c 	tst.w	r3, #12
 800114c:	d1f6      	bne.n	800113c <HAL_RCC_ClockConfig+0x11c>
 800114e:	e776      	b.n	800103e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001150:	6813      	ldr	r3, [r2, #0]
 8001152:	f023 0307 	bic.w	r3, r3, #7
 8001156:	4333      	orrs	r3, r6
 8001158:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	429e      	cmp	r6, r3
 8001162:	d19c      	bne.n	800109e <HAL_RCC_ClockConfig+0x7e>
 8001164:	e772      	b.n	800104c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001166:	6863      	ldr	r3, [r4, #4]
 8001168:	68e9      	ldr	r1, [r5, #12]
 800116a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800116e:	430b      	orrs	r3, r1
 8001170:	6063      	str	r3, [r4, #4]
 8001172:	e771      	b.n	8001058 <HAL_RCC_ClockConfig+0x38>
 8001174:	40022000 	.word	0x40022000
 8001178:	40021000 	.word	0x40021000
 800117c:	0800246c 	.word	0x0800246c
 8001180:	2000000c 	.word	0x2000000c

08001184 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001192:	6810      	ldr	r0, [r2, #0]
}    
 8001194:	40d8      	lsrs	r0, r3
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	0800247c 	.word	0x0800247c
 80011a0:	2000000c 	.word	0x2000000c

080011a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011b2:	6810      	ldr	r0, [r2, #0]
} 
 80011b4:	40d8      	lsrs	r0, r3
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	0800247c 	.word	0x0800247c
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011c4:	6803      	ldr	r3, [r0, #0]
{
 80011c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ca:	07d9      	lsls	r1, r3, #31
{
 80011cc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ce:	d520      	bpl.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d0:	4c35      	ldr	r4, [pc, #212]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011d2:	69e3      	ldr	r3, [r4, #28]
 80011d4:	00da      	lsls	r2, r3, #3
 80011d6:	d432      	bmi.n	800123e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011d8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	69e3      	ldr	r3, [r4, #28]
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61e3      	str	r3, [r4, #28]
 80011e2:	69e3      	ldr	r3, [r4, #28]
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	4e2f      	ldr	r6, [pc, #188]	; (80012ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011ee:	6833      	ldr	r3, [r6, #0]
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	d526      	bpl.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011f4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011f6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011fa:	d136      	bne.n	800126a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011fc:	6a23      	ldr	r3, [r4, #32]
 80011fe:	686a      	ldr	r2, [r5, #4]
 8001200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001204:	4313      	orrs	r3, r2
 8001206:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001208:	b11f      	cbz	r7, 8001212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120a:	69e3      	ldr	r3, [r4, #28]
 800120c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001210:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001212:	6828      	ldr	r0, [r5, #0]
 8001214:	0783      	lsls	r3, r0, #30
 8001216:	d506      	bpl.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001218:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800121a:	68a9      	ldr	r1, [r5, #8]
 800121c:	6853      	ldr	r3, [r2, #4]
 800121e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001222:	430b      	orrs	r3, r1
 8001224:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001226:	f010 0010 	ands.w	r0, r0, #16
 800122a:	d01b      	beq.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800122e:	68e9      	ldr	r1, [r5, #12]
 8001230:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001232:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001234:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001238:	430b      	orrs	r3, r1
 800123a:	6053      	str	r3, [r2, #4]
 800123c:	e012      	b.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2700      	movs	r7, #0
 8001240:	e7d4      	b.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	6833      	ldr	r3, [r6, #0]
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800124a:	f7fe ffc1 	bl	80001d0 <HAL_GetTick>
 800124e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	6833      	ldr	r3, [r6, #0]
 8001252:	05d8      	lsls	r0, r3, #23
 8001254:	d4ce      	bmi.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7fe ffbb 	bl	80001d0 <HAL_GetTick>
 800125a:	eba0 0008 	sub.w	r0, r0, r8
 800125e:	2864      	cmp	r0, #100	; 0x64
 8001260:	d9f6      	bls.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001262:	2003      	movs	r0, #3
}
 8001264:	b002      	add	sp, #8
 8001266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800126a:	686a      	ldr	r2, [r5, #4]
 800126c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001270:	4293      	cmp	r3, r2
 8001272:	d0c3      	beq.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001274:	2001      	movs	r0, #1
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001278:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800127a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800127c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800127e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001282:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001284:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001286:	07d9      	lsls	r1, r3, #31
 8001288:	d5b8      	bpl.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800128a:	f7fe ffa1 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001292:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	6a23      	ldr	r3, [r4, #32]
 8001296:	079a      	lsls	r2, r3, #30
 8001298:	d4b0      	bmi.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7fe ff99 	bl	80001d0 <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	4540      	cmp	r0, r8
 80012a2:	d9f7      	bls.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80012a4:	e7dd      	b.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	42420440 	.word	0x42420440

080012b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b4:	6a03      	ldr	r3, [r0, #32]
{
 80012b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80012c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80012c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80012ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80012cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80012ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80012d2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80012d4:	4d0a      	ldr	r5, [pc, #40]	; (8001300 <TIM_OC1_SetConfig+0x4c>)
 80012d6:	42a8      	cmp	r0, r5
 80012d8:	d10b      	bne.n	80012f2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80012da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80012dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80012e0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80012e2:	698e      	ldr	r6, [r1, #24]
 80012e4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80012ea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80012ec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80012f0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80012f4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80012f6:	684a      	ldr	r2, [r1, #4]
 80012f8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012fa:	6203      	str	r3, [r0, #32]
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
 80012fe:	bf00      	nop
 8001300:	40012c00 	.word	0x40012c00

08001304 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001304:	6a03      	ldr	r3, [r0, #32]
{
 8001306:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800130c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800130e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001310:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001312:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001314:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001316:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800131a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800131c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800131e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001322:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001326:	4d0b      	ldr	r5, [pc, #44]	; (8001354 <TIM_OC3_SetConfig+0x50>)
 8001328:	42a8      	cmp	r0, r5
 800132a:	d10d      	bne.n	8001348 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800132c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800132e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001332:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001336:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001338:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800133a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800133e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001344:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001348:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800134a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800134c:	684a      	ldr	r2, [r1, #4]
 800134e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001350:	6203      	str	r3, [r0, #32]
 8001352:	bd70      	pop	{r4, r5, r6, pc}
 8001354:	40012c00 	.word	0x40012c00

08001358 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001358:	6a03      	ldr	r3, [r0, #32]
{
 800135a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800135c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001360:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001362:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001364:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001366:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001368:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800136a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800136e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001372:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001378:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800137c:	4d06      	ldr	r5, [pc, #24]	; (8001398 <TIM_OC4_SetConfig+0x40>)
 800137e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001380:	bf02      	ittt	eq
 8001382:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001384:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001388:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800138c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800138e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001390:	684a      	ldr	r2, [r1, #4]
 8001392:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001394:	6203      	str	r3, [r0, #32]
 8001396:	bd30      	pop	{r4, r5, pc}
 8001398:	40012c00 	.word	0x40012c00

0800139c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800139c:	6803      	ldr	r3, [r0, #0]
}
 800139e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	4770      	bx	lr

080013b2 <HAL_TIM_PWM_MspInit>:
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80013b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f04f 0302 	mov.w	r3, #2
 80013c0:	d01c      	beq.n	80013fc <HAL_TIM_ConfigClockSource+0x48>
 80013c2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80013c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80013c8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80013ca:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80013ce:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013d0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80013d4:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80013d8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80013da:	680a      	ldr	r2, [r1, #0]
 80013dc:	2a40      	cmp	r2, #64	; 0x40
 80013de:	d079      	beq.n	80014d4 <HAL_TIM_ConfigClockSource+0x120>
 80013e0:	d819      	bhi.n	8001416 <HAL_TIM_ConfigClockSource+0x62>
 80013e2:	2a10      	cmp	r2, #16
 80013e4:	f000 8093 	beq.w	800150e <HAL_TIM_ConfigClockSource+0x15a>
 80013e8:	d80a      	bhi.n	8001400 <HAL_TIM_ConfigClockSource+0x4c>
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	f000 8089 	beq.w	8001502 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013f6:	2300      	movs	r3, #0
 80013f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80013fc:	4618      	mov	r0, r3
}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001400:	2a20      	cmp	r2, #32
 8001402:	f000 808a 	beq.w	800151a <HAL_TIM_ConfigClockSource+0x166>
 8001406:	2a30      	cmp	r2, #48	; 0x30
 8001408:	d1f2      	bne.n	80013f0 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800140a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800140c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001410:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001414:	e036      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001416:	2a70      	cmp	r2, #112	; 0x70
 8001418:	d036      	beq.n	8001488 <HAL_TIM_ConfigClockSource+0xd4>
 800141a:	d81b      	bhi.n	8001454 <HAL_TIM_ConfigClockSource+0xa0>
 800141c:	2a50      	cmp	r2, #80	; 0x50
 800141e:	d042      	beq.n	80014a6 <HAL_TIM_ConfigClockSource+0xf2>
 8001420:	2a60      	cmp	r2, #96	; 0x60
 8001422:	d1e5      	bne.n	80013f0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001424:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001426:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001428:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800142c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800142e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001430:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001432:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001434:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800143c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001440:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001444:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001446:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001448:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800144a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800144e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001452:	e017      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001454:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001458:	d011      	beq.n	800147e <HAL_TIM_ConfigClockSource+0xca>
 800145a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800145e:	d1c7      	bne.n	80013f0 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001460:	688a      	ldr	r2, [r1, #8]
 8001462:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001464:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001466:	68c9      	ldr	r1, [r1, #12]
 8001468:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800146a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800146e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001472:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001474:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800147c:	e002      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	e7b3      	b.n	80013f0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001488:	688a      	ldr	r2, [r1, #8]
 800148a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800148c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800148e:	68c9      	ldr	r1, [r1, #12]
 8001490:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001492:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001496:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800149a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800149c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800149e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014a0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80014a4:	e7ee      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014a6:	684c      	ldr	r4, [r1, #4]
 80014a8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80014aa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014ac:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014ae:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014b2:	f025 0501 	bic.w	r5, r5, #1
 80014b6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014b8:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80014ba:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014c0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80014c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014c6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80014c8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014ce:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80014d2:	e7d7      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014d4:	684c      	ldr	r4, [r1, #4]
 80014d6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80014d8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014da:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014dc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014e0:	f025 0501 	bic.w	r5, r5, #1
 80014e4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014e6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80014e8:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014ee:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80014f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014f4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80014f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014fc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001500:	e7c0      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001502:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001504:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001508:	f042 0207 	orr.w	r2, r2, #7
 800150c:	e7ba      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800150e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001510:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001514:	f042 0217 	orr.w	r2, r2, #23
 8001518:	e7b4      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800151a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800151c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001520:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001524:	e7ae      	b.n	8001484 <HAL_TIM_ConfigClockSource+0xd0>

08001526 <HAL_TIM_OC_DelayElapsedCallback>:
 8001526:	4770      	bx	lr

08001528 <HAL_TIM_IC_CaptureCallback>:
 8001528:	4770      	bx	lr

0800152a <HAL_TIM_PWM_PulseFinishedCallback>:
 800152a:	4770      	bx	lr

0800152c <HAL_TIM_TriggerCallback>:
 800152c:	4770      	bx	lr

0800152e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800152e:	6803      	ldr	r3, [r0, #0]
{
 8001530:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001532:	691a      	ldr	r2, [r3, #16]
{
 8001534:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001536:	0791      	lsls	r1, r2, #30
 8001538:	d50e      	bpl.n	8001558 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	0792      	lsls	r2, r2, #30
 800153e:	d50b      	bpl.n	8001558 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001540:	f06f 0202 	mvn.w	r2, #2
 8001544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001546:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001548:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800154a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800154c:	079b      	lsls	r3, r3, #30
 800154e:	d077      	beq.n	8001640 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001550:	f7ff ffea 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001554:	2300      	movs	r3, #0
 8001556:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	0750      	lsls	r0, r2, #29
 800155e:	d510      	bpl.n	8001582 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	0751      	lsls	r1, r2, #29
 8001564:	d50d      	bpl.n	8001582 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001566:	f06f 0204 	mvn.w	r2, #4
 800156a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800156c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800156e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001570:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001572:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001576:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001578:	d068      	beq.n	800164c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800157a:	f7ff ffd5 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800157e:	2300      	movs	r3, #0
 8001580:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	0712      	lsls	r2, r2, #28
 8001588:	d50f      	bpl.n	80015aa <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	0710      	lsls	r0, r2, #28
 800158e:	d50c      	bpl.n	80015aa <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001590:	f06f 0208 	mvn.w	r2, #8
 8001594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001596:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001598:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800159a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800159c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800159e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015a0:	d05a      	beq.n	8001658 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80015a2:	f7ff ffc1 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a6:	2300      	movs	r3, #0
 80015a8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	06d2      	lsls	r2, r2, #27
 80015b0:	d510      	bpl.n	80015d4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	06d0      	lsls	r0, r2, #27
 80015b6:	d50d      	bpl.n	80015d4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015b8:	f06f 0210 	mvn.w	r2, #16
 80015bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015be:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015c0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015c2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015c4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80015c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015ca:	d04b      	beq.n	8001664 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80015cc:	f7ff ffac 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d0:	2300      	movs	r3, #0
 80015d2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	07d1      	lsls	r1, r2, #31
 80015da:	d508      	bpl.n	80015ee <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	07d2      	lsls	r2, r2, #31
 80015e0:	d505      	bpl.n	80015ee <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015e2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80015e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80015ea:	f000 fd4b 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	0610      	lsls	r0, r2, #24
 80015f4:	d508      	bpl.n	8001608 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	0611      	lsls	r1, r2, #24
 80015fa:	d505      	bpl.n	8001608 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001600:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001602:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001604:	f000 f99b 	bl	800193e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	0652      	lsls	r2, r2, #25
 800160e:	d508      	bpl.n	8001622 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	0650      	lsls	r0, r2, #25
 8001614:	d505      	bpl.n	8001622 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001616:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800161a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800161c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800161e:	f7ff ff85 	bl	800152c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	0691      	lsls	r1, r2, #26
 8001628:	d522      	bpl.n	8001670 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	0692      	lsls	r2, r2, #26
 800162e:	d51f      	bpl.n	8001670 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001630:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001634:	4620      	mov	r0, r4
}
 8001636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800163a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800163c:	f000 b97e 	b.w	800193c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001640:	f7ff ff71 	bl	8001526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff ff70 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
 800164a:	e783      	b.n	8001554 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800164c:	f7ff ff6b 	bl	8001526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff ff6a 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
 8001656:	e792      	b.n	800157e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001658:	f7ff ff65 	bl	8001526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff ff64 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
 8001662:	e7a0      	b.n	80015a6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001664:	f7ff ff5f 	bl	8001526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff ff5e 	bl	800152a <HAL_TIM_PWM_PulseFinishedCallback>
 800166e:	e7af      	b.n	80015d0 <HAL_TIM_IRQHandler+0xa2>
 8001670:	bd10      	pop	{r4, pc}
	...

08001674 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001676:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001678:	4290      	cmp	r0, r2
 800167a:	d00a      	beq.n	8001692 <TIM_Base_SetConfig+0x1e>
 800167c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001680:	d007      	beq.n	8001692 <TIM_Base_SetConfig+0x1e>
 8001682:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001686:	4290      	cmp	r0, r2
 8001688:	d003      	beq.n	8001692 <TIM_Base_SetConfig+0x1e>
 800168a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800168e:	4290      	cmp	r0, r2
 8001690:	d115      	bne.n	80016be <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001692:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001698:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <TIM_Base_SetConfig+0x6c>)
 800169c:	4290      	cmp	r0, r2
 800169e:	d00a      	beq.n	80016b6 <TIM_Base_SetConfig+0x42>
 80016a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016a4:	d007      	beq.n	80016b6 <TIM_Base_SetConfig+0x42>
 80016a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d003      	beq.n	80016b6 <TIM_Base_SetConfig+0x42>
 80016ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b2:	4290      	cmp	r0, r2
 80016b4:	d103      	bne.n	80016be <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80016b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016bc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80016be:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80016c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80016c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016c8:	688b      	ldr	r3, [r1, #8]
 80016ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016cc:	680b      	ldr	r3, [r1, #0]
 80016ce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <TIM_Base_SetConfig+0x6c>)
 80016d2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80016d4:	bf04      	itt	eq
 80016d6:	690b      	ldreq	r3, [r1, #16]
 80016d8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80016da:	2301      	movs	r3, #1
 80016dc:	6143      	str	r3, [r0, #20]
 80016de:	4770      	bx	lr
 80016e0:	40012c00 	.word	0x40012c00

080016e4 <HAL_TIM_Base_Init>:
{
 80016e4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016e6:	4604      	mov	r4, r0
 80016e8:	b1a0      	cbz	r0, 8001714 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016f2:	b91b      	cbnz	r3, 80016fc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016f8:	f000 fd78 	bl	80021ec <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016fc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016fe:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001700:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001704:	1d21      	adds	r1, r4, #4
 8001706:	f7ff ffb5 	bl	8001674 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800170a:	2301      	movs	r3, #1
  return HAL_OK;
 800170c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800170e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001712:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
}
 8001716:	bd10      	pop	{r4, pc}

08001718 <HAL_TIM_PWM_Init>:
{
 8001718:	b510      	push	{r4, lr}
  if(htim == NULL)
 800171a:	4604      	mov	r4, r0
 800171c:	b1a0      	cbz	r0, 8001748 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800171e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001722:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001726:	b91b      	cbnz	r3, 8001730 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001728:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800172c:	f7ff fe41 	bl	80013b2 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001730:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001732:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001734:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001738:	1d21      	adds	r1, r4, #4
 800173a:	f7ff ff9b 	bl	8001674 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800173e:	2301      	movs	r3, #1
  return HAL_OK;
 8001740:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001746:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001748:	2001      	movs	r0, #1
}
 800174a:	bd10      	pop	{r4, pc}

0800174c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800174c:	6a03      	ldr	r3, [r0, #32]
{
 800174e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001750:	f023 0310 	bic.w	r3, r3, #16
 8001754:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001756:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001758:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800175a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800175c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800175e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001762:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001766:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001768:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800176c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001770:	4d0b      	ldr	r5, [pc, #44]	; (80017a0 <TIM_OC2_SetConfig+0x54>)
 8001772:	42a8      	cmp	r0, r5
 8001774:	d10d      	bne.n	8001792 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001776:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800177c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001780:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001782:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001784:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001788:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800178a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800178e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001792:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001794:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001796:	684a      	ldr	r2, [r1, #4]
 8001798:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800179a:	6203      	str	r3, [r0, #32]
 800179c:	bd70      	pop	{r4, r5, r6, pc}
 800179e:	bf00      	nop
 80017a0:	40012c00 	.word	0x40012c00

080017a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80017a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80017a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017aa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f04f 0002 	mov.w	r0, #2
 80017b2:	d025      	beq.n	8001800 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80017b4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80017b6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80017ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80017be:	2a0c      	cmp	r2, #12
 80017c0:	d818      	bhi.n	80017f4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80017c2:	e8df f002 	tbb	[pc, r2]
 80017c6:	1707      	.short	0x1707
 80017c8:	171e1717 	.word	0x171e1717
 80017cc:	172f1717 	.word	0x172f1717
 80017d0:	1717      	.short	0x1717
 80017d2:	40          	.byte	0x40
 80017d3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	f7ff fd6d 	bl	80012b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	f042 0208 	orr.w	r2, r2, #8
 80017e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	f022 0204 	bic.w	r2, r2, #4
 80017ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017f2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80017f4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80017f6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001800:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	f7ff ffa2 	bl	800174c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001808:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800180a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001822:	e7e6      	b.n	80017f2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	f7ff fd6d 	bl	8001304 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800182a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800182c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	f042 0208 	orr.w	r2, r2, #8
 8001834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	f022 0204 	bic.w	r2, r2, #4
 800183c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001842:	61da      	str	r2, [r3, #28]
    break;
 8001844:	e7d6      	b.n	80017f4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	f7ff fd86 	bl	8001358 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800184c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800184e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001856:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001866:	e7ec      	b.n	8001842 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001868 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001868:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800186a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800186c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800186e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001870:	ea23 0304 	bic.w	r3, r3, r4
 8001874:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001876:	6a03      	ldr	r3, [r0, #32]
 8001878:	408a      	lsls	r2, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	6202      	str	r2, [r0, #32]
 800187e:	bd10      	pop	{r4, pc}

08001880 <HAL_TIM_PWM_Start>:
{
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001884:	2201      	movs	r2, #1
 8001886:	6800      	ldr	r0, [r0, #0]
 8001888:	f7ff ffee 	bl	8001868 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_TIM_PWM_Start+0x28>)
}
 8001890:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001892:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001894:	bf02      	ittt	eq
 8001896:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001898:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800189c:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	40012c00 	.word	0x40012c00

080018ac <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d01f      	beq.n	80018f4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80018b4:	68cb      	ldr	r3, [r1, #12]
 80018b6:	688a      	ldr	r2, [r1, #8]
 80018b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80018be:	684a      	ldr	r2, [r1, #4]
 80018c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80018c6:	680a      	ldr	r2, [r1, #0]
 80018c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80018ce:	690a      	ldr	r2, [r1, #16]
 80018d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80018d6:	694a      	ldr	r2, [r1, #20]
 80018d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018de:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80018e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e4:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80018e6:	6802      	ldr	r2, [r0, #0]
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80018ea:	2300      	movs	r3, #0
 80018ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80018f0:	4618      	mov	r0, r3
 80018f2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80018f4:	2002      	movs	r0, #2
}
 80018f6:	4770      	bx	lr

080018f8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80018f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80018fc:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80018fe:	2b01      	cmp	r3, #1
 8001900:	f04f 0302 	mov.w	r3, #2
 8001904:	d018      	beq.n	8001938 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001906:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800190a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800190c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800190e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001910:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001916:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4322      	orrs	r2, r4
 800191c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001924:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800192c:	2301      	movs	r3, #1
 800192e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001932:	2300      	movs	r3, #0
 8001934:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001938:	4618      	mov	r0, r3

  return HAL_OK;
}
 800193a:	bd10      	pop	{r4, pc}

0800193c <HAL_TIMEx_CommutationCallback>:
 800193c:	4770      	bx	lr

0800193e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800193e:	4770      	bx	lr

08001940 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001944:	6805      	ldr	r5, [r0, #0]
 8001946:	68c2      	ldr	r2, [r0, #12]
 8001948:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800194a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800194c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001950:	4313      	orrs	r3, r2
 8001952:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001954:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001956:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001958:	430b      	orrs	r3, r1
 800195a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800195c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001960:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001964:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001966:	4313      	orrs	r3, r2
 8001968:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800196a:	696b      	ldr	r3, [r5, #20]
 800196c:	6982      	ldr	r2, [r0, #24]
 800196e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001972:	4313      	orrs	r3, r2
 8001974:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001976:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <UART_SetConfig+0x138>)
{
 8001978:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800197a:	429d      	cmp	r5, r3
 800197c:	f04f 0419 	mov.w	r4, #25
 8001980:	d146      	bne.n	8001a10 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001982:	f7ff fc0f 	bl	80011a4 <HAL_RCC_GetPCLK2Freq>
 8001986:	fb04 f300 	mul.w	r3, r4, r0
 800198a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800198e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001992:	00b6      	lsls	r6, r6, #2
 8001994:	fbb3 f3f6 	udiv	r3, r3, r6
 8001998:	fbb3 f3f8 	udiv	r3, r3, r8
 800199c:	011e      	lsls	r6, r3, #4
 800199e:	f7ff fc01 	bl	80011a4 <HAL_RCC_GetPCLK2Freq>
 80019a2:	4360      	muls	r0, r4
 80019a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fbb0 f7f3 	udiv	r7, r0, r3
 80019ae:	f7ff fbf9 	bl	80011a4 <HAL_RCC_GetPCLK2Freq>
 80019b2:	4360      	muls	r0, r4
 80019b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	fbb3 f3f8 	udiv	r3, r3, r8
 80019c2:	fb08 7313 	mls	r3, r8, r3, r7
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	3332      	adds	r3, #50	; 0x32
 80019ca:	fbb3 f3f8 	udiv	r3, r3, r8
 80019ce:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80019d2:	f7ff fbe7 	bl	80011a4 <HAL_RCC_GetPCLK2Freq>
 80019d6:	4360      	muls	r0, r4
 80019d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	fbb0 faf2 	udiv	sl, r0, r2
 80019e2:	f7ff fbdf 	bl	80011a4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019e6:	4360      	muls	r0, r4
 80019e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80019f6:	fb08 a313 	mls	r3, r8, r3, sl
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	3332      	adds	r3, #50	; 0x32
 80019fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	433b      	orrs	r3, r7
 8001a08:	4433      	add	r3, r6
 8001a0a:	60ab      	str	r3, [r5, #8]
 8001a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a10:	f7ff fbb8 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 8001a14:	fb04 f300 	mul.w	r3, r4, r0
 8001a18:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001a1c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a20:	00b6      	lsls	r6, r6, #2
 8001a22:	fbb3 f3f6 	udiv	r3, r3, r6
 8001a26:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a2a:	011e      	lsls	r6, r3, #4
 8001a2c:	f7ff fbaa 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 8001a30:	4360      	muls	r0, r4
 8001a32:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a3c:	f7ff fba2 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 8001a40:	4360      	muls	r0, r4
 8001a42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a50:	fb08 7313 	mls	r3, r8, r3, r7
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	3332      	adds	r3, #50	; 0x32
 8001a58:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a5c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001a60:	f7ff fb90 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 8001a64:	4360      	muls	r0, r4
 8001a66:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	fbb0 faf2 	udiv	sl, r0, r2
 8001a70:	f7ff fb88 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 8001a74:	e7b7      	b.n	80019e6 <UART_SetConfig+0xa6>
 8001a76:	bf00      	nop
 8001a78:	40013800 	.word	0x40013800

08001a7c <HAL_UART_Init>:
{
 8001a7c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a7e:	4604      	mov	r4, r0
 8001a80:	b340      	cbz	r0, 8001ad4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a8a:	b91b      	cbnz	r3, 8001a94 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a90:	f000 fc02 	bl	8002298 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a94:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001a96:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a9c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a9e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aa4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aa6:	f7ff ff4b 	bl	8001940 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aaa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aac:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001abc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001ac6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001aca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001ace:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ad2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ad4:	2001      	movs	r0, #1
}
 8001ad6:	bd10      	pop	{r4, pc}

08001ad8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad8:	2228      	movs	r2, #40	; 0x28
{
 8001ada:	b510      	push	{r4, lr}
 8001adc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	eb0d 0002 	add.w	r0, sp, r2
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f000 fca6 	bl	8002434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	2214      	movs	r2, #20
 8001aea:	2100      	movs	r1, #0
 8001aec:	eb0d 0002 	add.w	r0, sp, r2
 8001af0:	f000 fca0 	bl	8002434 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	2100      	movs	r1, #0
 8001af6:	2210      	movs	r2, #16
 8001af8:	a801      	add	r0, sp, #4
 8001afa:	f000 fc9b 	bl	8002434 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b04:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b06:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b08:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b10:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b12:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b14:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f7ff f8ba 	bl	8000c90 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b22:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b24:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b26:	4621      	mov	r1, r4
 8001b28:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b30:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b32:	f7ff fa75 	bl	8001020 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b3c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b3e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f7ff fb40 	bl	80011c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001b44:	b014      	add	sp, #80	; 0x50
 8001b46:	bd10      	pop	{r4, pc}

08001b48 <modo_process>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void modo_process(){
 8001b48:	b538      	push	{r3, r4, r5, lr}
	switch(ST_MODO){
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <modo_process+0xfc>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	2a03      	cmp	r2, #3
 8001b50:	d876      	bhi.n	8001c40 <modo_process+0xf8>
 8001b52:	e8df f002 	tbb	[pc, r2]
 8001b56:	3502      	.short	0x3502
 8001b58:	6a45      	.short	0x6a45
	case BUSQUEDA:
		if(sharpizq<sharpfront && sharpfront>sharpder){ //Objeto en el frente mayor
 8001b5a:	493b      	ldr	r1, [pc, #236]	; (8001c48 <modo_process+0x100>)
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <modo_process+0x104>)
 8001b5e:	460c      	mov	r4, r1
 8001b60:	8818      	ldrh	r0, [r3, #0]
 8001b62:	880a      	ldrh	r2, [r1, #0]
 8001b64:	b280      	uxth	r0, r0
 8001b66:	b292      	uxth	r2, r2
 8001b68:	4290      	cmp	r0, r2
 8001b6a:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <modo_process+0x108>)
 8001b6c:	d20c      	bcs.n	8001b88 <modo_process+0x40>
 8001b6e:	8808      	ldrh	r0, [r1, #0]
 8001b70:	8811      	ldrh	r1, [r2, #0]
 8001b72:	b280      	uxth	r0, r0
 8001b74:	b289      	uxth	r1, r1
 8001b76:	4288      	cmp	r0, r1
 8001b78:	d906      	bls.n	8001b88 <modo_process+0x40>
		//	ST_MODO=ATAQUE;
			  ST_MOT=ADELANTE;
 8001b7a:	2200      	movs	r2, #0
		}else if(sharpizq>sharpfront && sharpizq>sharpder){//Si hay un objeto en izquierda
		    ST_MOT=IZQUIERDA;
		}else if(sharpder>sharpfront && sharpder>sharpizq){
			ST_MOT=DERECHA;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <modo_process+0x10c>)
 8001b7e:	601a      	str	r2, [r3, #0]
		}
		alistarse=0;
 8001b80:	2200      	movs	r2, #0
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <modo_process+0x110>)
 8001b84:	801a      	strh	r2, [r3, #0]
//		ST_MOT=IZQUIERDA;
	break;
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
		}else if(sharpizq>sharpfront && sharpizq>sharpder){//Si hay un objeto en izquierda
 8001b88:	8818      	ldrh	r0, [r3, #0]
 8001b8a:	8821      	ldrh	r1, [r4, #0]
 8001b8c:	b280      	uxth	r0, r0
 8001b8e:	b289      	uxth	r1, r1
 8001b90:	4288      	cmp	r0, r1
 8001b92:	d907      	bls.n	8001ba4 <modo_process+0x5c>
 8001b94:	8818      	ldrh	r0, [r3, #0]
 8001b96:	8811      	ldrh	r1, [r2, #0]
 8001b98:	b280      	uxth	r0, r0
 8001b9a:	b289      	uxth	r1, r1
 8001b9c:	4288      	cmp	r0, r1
 8001b9e:	d901      	bls.n	8001ba4 <modo_process+0x5c>
		    ST_MOT=IZQUIERDA;
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	e7eb      	b.n	8001b7c <modo_process+0x34>
		}else if(sharpder>sharpfront && sharpder>sharpizq){
 8001ba4:	8810      	ldrh	r0, [r2, #0]
 8001ba6:	8821      	ldrh	r1, [r4, #0]
 8001ba8:	b280      	uxth	r0, r0
 8001baa:	b289      	uxth	r1, r1
 8001bac:	4288      	cmp	r0, r1
 8001bae:	d9e7      	bls.n	8001b80 <modo_process+0x38>
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d9e1      	bls.n	8001b80 <modo_process+0x38>
			ST_MOT=DERECHA;
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	e7dd      	b.n	8001b7c <modo_process+0x34>
	case ATAQUE:
		atimEN=1;//attack timer enable
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4826      	ldr	r0, [pc, #152]	; (8001c5c <modo_process+0x114>)
		ST_MOT=ADELANTE;//Modo ataque
		if(contAttack>=2500){
 8001bc4:	f640 14c3 	movw	r4, #2499	; 0x9c3
		atimEN=1;//attack timer enable
 8001bc8:	7003      	strb	r3, [r0, #0]
		ST_MOT=ADELANTE;//Modo ataque
 8001bca:	2300      	movs	r3, #0
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <modo_process+0x10c>)
		if(contAttack>=2500){
 8001bce:	4924      	ldr	r1, [pc, #144]	; (8001c60 <modo_process+0x118>)
		ST_MOT=ADELANTE;//Modo ataque
 8001bd0:	6013      	str	r3, [r2, #0]
		if(contAttack>=2500){
 8001bd2:	880a      	ldrh	r2, [r1, #0]
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	42a2      	cmp	r2, r4
 8001bd8:	d932      	bls.n	8001c40 <modo_process+0xf8>
			atimEN=0;
 8001bda:	7003      	strb	r3, [r0, #0]
			contAttack=0;
 8001bdc:	800b      	strh	r3, [r1, #0]
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
			ST_MOT=BUSQUEDA;
		}

	break;
	case FREERUN:
		  if(contMilis>=1000){//Programacion freerun
 8001be0:	4c20      	ldr	r4, [pc, #128]	; (8001c64 <modo_process+0x11c>)
 8001be2:	8823      	ldrh	r3, [r4, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bea:	d329      	bcc.n	8001c40 <modo_process+0xf8>
			  contMilis=0;
 8001bec:	2500      	movs	r5, #0
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf2:	481d      	ldr	r0, [pc, #116]	; (8001c68 <modo_process+0x120>)
			  contMilis=0;
 8001bf4:	8025      	strh	r5, [r4, #0]
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001bf6:	f7ff f846 	bl	8000c86 <HAL_GPIO_TogglePin>
			  if(ST_MOT==ADELANTE){
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <modo_process+0x10c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	b922      	cbnz	r2, 8001c0a <modo_process+0xc2>
				  ST_MOT=ATRAS;
 8001c00:	2201      	movs	r2, #1
			  }
			  else if(ST_MOT==ATRAS){
				  ST_MOT=IZQUIERDA;
 8001c02:	601a      	str	r2, [r3, #0]
				  ST_MOT=QUIETO;
			  }
			  else if(ST_MOT==QUIETO){
				  ST_MOT=ADELANTE;
			  }
			  contMilis=0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	8023      	strh	r3, [r4, #0]
 8001c08:	bd38      	pop	{r3, r4, r5, pc}
			  else if(ST_MOT==ATRAS){
 8001c0a:	2a01      	cmp	r2, #1
 8001c0c:	d101      	bne.n	8001c12 <modo_process+0xca>
				  ST_MOT=IZQUIERDA;
 8001c0e:	2202      	movs	r2, #2
 8001c10:	e7f7      	b.n	8001c02 <modo_process+0xba>
			  else if(ST_MOT==IZQUIERDA){
 8001c12:	2a02      	cmp	r2, #2
 8001c14:	d101      	bne.n	8001c1a <modo_process+0xd2>
				  ST_MOT=DERECHA;
 8001c16:	2203      	movs	r2, #3
 8001c18:	e7f3      	b.n	8001c02 <modo_process+0xba>
			  else if(ST_MOT==DERECHA){
 8001c1a:	2a03      	cmp	r2, #3
 8001c1c:	d101      	bne.n	8001c22 <modo_process+0xda>
				  ST_MOT=QUIETO;
 8001c1e:	2204      	movs	r2, #4
 8001c20:	e7ef      	b.n	8001c02 <modo_process+0xba>
			  else if(ST_MOT==QUIETO){
 8001c22:	2a04      	cmp	r2, #4
				  ST_MOT=ADELANTE;
 8001c24:	bf08      	it	eq
 8001c26:	601d      	streq	r5, [r3, #0]
 8001c28:	e7ec      	b.n	8001c04 <modo_process+0xbc>
		  } //Fin programacion freerun
	break;
	case DESCANSO://5 segundos antes de la competicion
		ST_MOT=QUIETO;
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <modo_process+0x10c>)
 8001c2e:	6011      	str	r1, [r2, #0]
		if(alistarse>=5000){
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <modo_process+0x110>)
 8001c32:	8811      	ldrh	r1, [r2, #0]
 8001c34:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c38:	4291      	cmp	r1, r2
			ST_MODO=BUSQUEDA;
 8001c3a:	bf84      	itt	hi
 8001c3c:	2200      	movhi	r2, #0
 8001c3e:	701a      	strbhi	r2, [r3, #0]
 8001c40:	bd38      	pop	{r3, r4, r5, pc}
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000042 	.word	0x20000042
 8001c4c:	20000194 	.word	0x20000194
 8001c50:	20000044 	.word	0x20000044
 8001c54:	2000002c 	.word	0x2000002c
 8001c58:	20000032 	.word	0x20000032
 8001c5c:	20000034 	.word	0x20000034
 8001c60:	20000036 	.word	0x20000036
 8001c64:	20000038 	.word	0x20000038
 8001c68:	40011000 	.word	0x40011000

08001c6c <direccion_process>:
	QRD1=HAL_GPIO_ReadPin(GPIOB,QRD1_Pin);//QRD1
	QRD2=HAL_GPIO_ReadPin(GPIOB,QRD2_Pin);//QRD2
	QRD3=HAL_GPIO_ReadPin(GPIOB,QRD3_Pin);//QRD3
	QRD4=HAL_GPIO_ReadPin(GPIOB,QRD4_Pin);//QRD4
}//Fin proceso piso
void direccion_process(){
 8001c6c:	b508      	push	{r3, lr}
switch(ST_MOT){
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <direccion_process+0xb0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d850      	bhi.n	8001d18 <direccion_process+0xac>
 8001c76:	e8df f003 	tbb	[pc, r3]
 8001c7a:	1703      	.short	0x1703
 8001c7c:	3931      	.short	0x3931
 8001c7e:	41          	.byte	0x41
 8001c7f:	00          	.byte	0x00
	case ADELANTE:
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_RESET);//	B12
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4826      	ldr	r0, [pc, #152]	; (8001d20 <direccion_process+0xb4>)
 8001c88:	f7fe fff8 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_SET);//B13
 8001c8c:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOB,IN3_Pin, GPIO_PIN_RESET);//	B12
		  HAL_GPIO_WritePin(GPIOB, IN4_Pin, GPIO_PIN_SET);//B13
	break;
	case IZQUIERDA:
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_SET);//	B12
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);//B13
 8001c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c92:	4823      	ldr	r0, [pc, #140]	; (8001d20 <direccion_process+0xb4>)
 8001c94:	f7fe fff2 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,IN3_Pin, GPIO_PIN_SET);//	B10
 8001c98:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOB, IN4_Pin, GPIO_PIN_SET);//B11
	break;
	case QUIETO:
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_RESET);//	B12
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);//B13
		  HAL_GPIO_WritePin(GPIOB,IN3_Pin, GPIO_PIN_RESET);//	B12
 8001c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9e:	4820      	ldr	r0, [pc, #128]	; (8001d20 <direccion_process+0xb4>)
 8001ca0:	f7fe ffec 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN4_Pin, GPIO_PIN_RESET);//B13
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	e012      	b.n	8001cce <direccion_process+0x62>
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_SET);//	B12
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cae:	481c      	ldr	r0, [pc, #112]	; (8001d20 <direccion_process+0xb4>)
 8001cb0:	f7fe ffe4 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);//B13
 8001cb4:	2200      	movs	r2, #0
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_SET);//B13
 8001cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cba:	4819      	ldr	r0, [pc, #100]	; (8001d20 <direccion_process+0xb4>)
 8001cbc:	f7fe ffde 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,IN3_Pin, GPIO_PIN_RESET);//	B10
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc6:	4816      	ldr	r0, [pc, #88]	; (8001d20 <direccion_process+0xb4>)
 8001cc8:	f7fe ffd8 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN4_Pin, GPIO_PIN_SET);//B11
 8001ccc:	2201      	movs	r2, #1
	break;
}
}
 8001cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  HAL_GPIO_WritePin(GPIOB, IN4_Pin, GPIO_PIN_RESET);//B13
 8001cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <direccion_process+0xb4>)
 8001cd8:	f7fe bfd0 	b.w	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_SET);//	B12
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce2:	480f      	ldr	r0, [pc, #60]	; (8001d20 <direccion_process+0xb4>)
 8001ce4:	f7fe ffca 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);//B13
 8001ce8:	2200      	movs	r2, #0
 8001cea:	e7d0      	b.n	8001c8e <direccion_process+0x22>
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_RESET);//	B12
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <direccion_process+0xb4>)
 8001cf4:	f7fe ffc2 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_SET);//B13
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	e7dc      	b.n	8001cb6 <direccion_process+0x4a>
		  HAL_GPIO_WritePin(GPIOB,IN1_Pin, GPIO_PIN_RESET);//	B12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <direccion_process+0xb4>)
 8001d04:	f7fe ffba 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, IN2_Pin, GPIO_PIN_RESET);//B13
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0e:	4804      	ldr	r0, [pc, #16]	; (8001d20 <direccion_process+0xb4>)
 8001d10:	f7fe ffb4 	bl	8000c7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,IN3_Pin, GPIO_PIN_RESET);//	B12
 8001d14:	2200      	movs	r2, #0
 8001d16:	e7c0      	b.n	8001c9a <direccion_process+0x2e>
 8001d18:	bd08      	pop	{r3, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000002c 	.word	0x2000002c
 8001d20:	40010c00 	.word	0x40010c00

08001d24 <main>:
{
 8001d24:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d28:	4db8      	ldr	r5, [pc, #736]	; (800200c <main+0x2e8>)
{
 8001d2a:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8001d2c:	f7fe fa32 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001d30:	f7ff fed2 	bl	8001ad8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	2210      	movs	r2, #16
 8001d36:	2100      	movs	r1, #0
 8001d38:	a813      	add	r0, sp, #76	; 0x4c
 8001d3a:	f000 fb7b 	bl	8002434 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	61ab      	str	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d50:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d54:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	61ab      	str	r3, [r5, #24]
 8001d6c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d6e:	48a8      	ldr	r0, [pc, #672]	; (8002010 <main+0x2ec>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	9303      	str	r3, [sp, #12]
 8001d76:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	69ab      	ldr	r3, [r5, #24]
  htim1.Init.Period = 3599;
 8001d7a:	f640 6b0f 	movw	fp, #3599	; 0xe0f
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	61ab      	str	r3, [r5, #24]
 8001d84:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	9304      	str	r3, [sp, #16]
 8001d90:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8001d94:	4f9f      	ldr	r7, [pc, #636]	; (8002014 <main+0x2f0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	61ab      	str	r3, [r5, #24]
 8001d9c:	69ab      	ldr	r3, [r5, #24]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	9305      	str	r3, [sp, #20]
 8001da4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001da6:	f7fe ff69 	bl	8000c7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, QRD3_Pin|QRD4_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	21c0      	movs	r1, #192	; 0xc0
 8001dae:	489a      	ldr	r0, [pc, #616]	; (8002018 <main+0x2f4>)
 8001db0:	f7fe ff64 	bl	8000c7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, IN3_Pin|IN4_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001dba:	4898      	ldr	r0, [pc, #608]	; (800201c <main+0x2f8>)
 8001dbc:	f7fe ff5e 	bl	8000c7c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	a913      	add	r1, sp, #76	; 0x4c
 8001dc2:	4893      	ldr	r0, [pc, #588]	; (8002010 <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dc4:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f7fe fe74 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QRD3_Pin|QRD4_Pin;
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	a913      	add	r1, sp, #76	; 0x4c
 8001dd8:	488f      	ldr	r0, [pc, #572]	; (8002018 <main+0x2f4>)
  GPIO_InitStruct.Pin = QRD3_Pin|QRD4_Pin;
 8001dda:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f7fe fe69 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN1_Pin|IN2_Pin;
 8001dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	a913      	add	r1, sp, #76	; 0x4c
 8001df0:	488a      	ldr	r0, [pc, #552]	; (800201c <main+0x2f8>)
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN1_Pin|IN2_Pin;
 8001df2:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f7fe fe5d 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PULSADOR_Pin;
 8001e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(PULSADOR_GPIO_Port, &GPIO_InitStruct);
 8001e06:	a913      	add	r1, sp, #76	; 0x4c
 8001e08:	4883      	ldr	r0, [pc, #524]	; (8002018 <main+0x2f4>)
  GPIO_InitStruct.Pin = PULSADOR_Pin;
 8001e0a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(PULSADOR_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f7fe fe54 	bl	8000abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QRD1_Pin|QRD2_Pin;
 8001e14:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	a913      	add	r1, sp, #76	; 0x4c
 8001e18:	4880      	ldr	r0, [pc, #512]	; (800201c <main+0x2f8>)
  GPIO_InitStruct.Pin = QRD1_Pin|QRD2_Pin;
 8001e1a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f7fe fe4c 	bl	8000abc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e24:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e26:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e28:	ea43 0308 	orr.w	r3, r3, r8
 8001e2c:	616b      	str	r3, [r5, #20]
 8001e2e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e30:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e32:	ea03 0308 	and.w	r3, r3, r8
 8001e36:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e38:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e3c:	f7fe fce6 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e40:	200b      	movs	r0, #11
 8001e42:	f7fe fd17 	bl	8000874 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	4621      	mov	r1, r4
 8001e48:	2210      	movs	r2, #16
 8001e4a:	a808      	add	r0, sp, #32
 8001e4c:	f000 faf2 	bl	8002434 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	4621      	mov	r1, r4
 8001e52:	221c      	movs	r2, #28
 8001e54:	a80c      	add	r0, sp, #48	; 0x30
  htim1.Instance = TIM1;
 8001e56:	4d72      	ldr	r5, [pc, #456]	; (8002020 <main+0x2fc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	9406      	str	r4, [sp, #24]
 8001e5a:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5c:	f000 faea 	bl	8002434 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e60:	221c      	movs	r2, #28
 8001e62:	4621      	mov	r1, r4
 8001e64:	a813      	add	r0, sp, #76	; 0x4c
 8001e66:	f000 fae5 	bl	8002434 <memset>
  htim1.Instance = TIM1;
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <main+0x300>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e6c:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 1;
 8001e6e:	e885 0108 	stmia.w	r5, {r3, r8}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e76:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e78:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 3599;
 8001e7a:	f8c5 b00c 	str.w	fp, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e7e:	f7ff fc31 	bl	80016e4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e82:	a908      	add	r1, sp, #32
 8001e84:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e86:	f8cd a020 	str.w	sl, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e8a:	f7ff fa93 	bl	80013b4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f7ff fc42 	bl	8001718 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e94:	a906      	add	r1, sp, #24
 8001e96:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e9c:	f7ff fd2c 	bl	80018f8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	a90c      	add	r1, sp, #48	; 0x30
 8001ea6:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001eaa:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eac:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eae:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb0:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb2:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb4:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb6:	f7ff fc75 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eba:	2204      	movs	r2, #4
 8001ebc:	a90c      	add	r1, sp, #48	; 0x30
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f7ff fc70 	bl	80017a4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec4:	a913      	add	r1, sp, #76	; 0x4c
 8001ec6:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec8:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eca:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ecc:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ece:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ed0:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ed2:	9618      	str	r6, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed4:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed6:	f7ff fce9 	bl	80018ac <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001eda:	4628      	mov	r0, r5
 8001edc:	f000 f9b4 	bl	8002248 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	a813      	add	r0, sp, #76	; 0x4c
 8001ee6:	f000 faa5 	bl	8002434 <memset>
  htim2.Init.Prescaler = 35999;
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eee:	f648 439f 	movw	r3, #35999	; 0x8c9f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef2:	4638      	mov	r0, r7
  htim2.Init.Prescaler = 35999;
 8001ef4:	e887 000c 	stmia.w	r7, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	940c      	str	r4, [sp, #48]	; 0x30
 8001efa:	940d      	str	r4, [sp, #52]	; 0x34
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	60bc      	str	r4, [r7, #8]
  htim2.Init.Period = 1;
 8001efe:	f8c7 800c 	str.w	r8, [r7, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f02:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f06:	f7ff fbed 	bl	80016e4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0a:	a913      	add	r1, sp, #76	; 0x4c
 8001f0c:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f12:	f7ff fa4f 	bl	80013b4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f16:	a90c      	add	r1, sp, #48	; 0x30
 8001f18:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 8001f1a:	4e43      	ldr	r6, [pc, #268]	; (8002028 <main+0x304>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f20:	f7ff fcea 	bl	80018f8 <HAL_TIMEx_MasterConfigSynchronization>
  hadc1.Instance = ADC1;
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <main+0x308>)
  hadc1.Init.NbrOfConversion = 4;
 8001f26:	f04f 0a04 	mov.w	sl, #4
  hadc1.Instance = ADC1;
 8001f2a:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f30:	60b3      	str	r3, [r6, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f32:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f36:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f38:	9413      	str	r4, [sp, #76]	; 0x4c
 8001f3a:	9414      	str	r4, [sp, #80]	; 0x50
 8001f3c:	9415      	str	r4, [sp, #84]	; 0x54
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f3e:	60f4      	str	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f40:	6174      	str	r4, [r6, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f42:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f44:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001f46:	f8c6 a010 	str.w	sl, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f4a:	f7fe fbcb 	bl	80006e4 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001f4e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f50:	a913      	add	r1, sp, #76	; 0x4c
 8001f52:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001f54:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.Channel = ADC_CHANNEL_0;
 8001f56:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f58:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5c:	f7fe f9f0 	bl	8000340 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8001f60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f64:	f04f 0803 	mov.w	r8, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f68:	a913      	add	r1, sp, #76	; 0x4c
 8001f6a:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f6c:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f70:	f7fe f9e6 	bl	8000340 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f74:	a913      	add	r1, sp, #76	; 0x4c
 8001f76:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_2;
 8001f78:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f7c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f80:	f7fe f9de 	bl	8000340 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f84:	a913      	add	r1, sp, #76	; 0x4c
 8001f86:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 8001f88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f8c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f90:	f7fe f9d6 	bl	8000340 <HAL_ADC_ConfigChannel>
  huart1.Init.BaudRate = 115200;
 8001f94:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001f98:	4825      	ldr	r0, [pc, #148]	; (8002030 <main+0x30c>)
  huart1.Init.BaudRate = 115200;
 8001f9a:	4926      	ldr	r1, [pc, #152]	; (8002034 <main+0x310>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9c:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001f9e:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa2:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa6:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fa8:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fae:	f7ff fd65 	bl	8001a7c <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	f7ff f9f2 	bl	800139c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,4);
 8001fb8:	4652      	mov	r2, sl
 8001fba:	491f      	ldr	r1, [pc, #124]	; (8002038 <main+0x314>)
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f7fe fae1 	bl	8000584 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	f7fe fa78 	bl	80004b8 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001fc8:	4621      	mov	r1, r4
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f7ff fc58 	bl	8001880 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	4651      	mov	r1, sl
 8001fd4:	f7ff fc54 	bl	8001880 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,3599);//100%
 8001fd8:	682b      	ldr	r3, [r5, #0]
		  sharpizq=adc_buf[0];
 8001fda:	4c17      	ldr	r4, [pc, #92]	; (8002038 <main+0x314>)
	  if(TiemADC>=10){
 8001fdc:	4d17      	ldr	r5, [pc, #92]	; (800203c <main+0x318>)
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,3599);//100%
 8001fde:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,3599);//100%
 8001fe2:	f8c3 b038 	str.w	fp, [r3, #56]	; 0x38
	  if(TiemADC>=10){
 8001fe6:	782b      	ldrb	r3, [r5, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d935      	bls.n	8002058 <main+0x334>
		  HAL_ADC_Start_IT(&hadc1);
 8001fec:	4630      	mov	r0, r6
 8001fee:	f7fe fa63 	bl	80004b8 <HAL_ADC_Start_IT>
		  sharpizq=adc_buf[0];
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <main+0x31c>)
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	8013      	strh	r3, [r2, #0]
		  sharpfront=adc_buf[1];
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <main+0x320>)
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	8013      	strh	r3, [r2, #0]
		  sharpder=adc_buf[2];
 8002002:	68a3      	ldr	r3, [r4, #8]
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <main+0x324>)
 8002006:	b29b      	uxth	r3, r3
 8002008:	8013      	strh	r3, [r2, #0]
 800200a:	e01f      	b.n	800204c <main+0x328>
 800200c:	40021000 	.word	0x40021000
 8002010:	40011000 	.word	0x40011000
 8002014:	20000150 	.word	0x20000150
 8002018:	40010800 	.word	0x40010800
 800201c:	40010c00 	.word	0x40010c00
 8002020:	200000fc 	.word	0x200000fc
 8002024:	40012c00 	.word	0x40012c00
 8002028:	20000048 	.word	0x20000048
 800202c:	40012400 	.word	0x40012400
 8002030:	20000078 	.word	0x20000078
 8002034:	40013800 	.word	0x40013800
 8002038:	20000140 	.word	0x20000140
 800203c:	20000030 	.word	0x20000030
 8002040:	20000194 	.word	0x20000194
 8002044:	20000042 	.word	0x20000042
 8002048:	20000044 	.word	0x20000044
		  battery=adc_buf[3];
 800204c:	68e3      	ldr	r3, [r4, #12]
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <main+0x340>)
 8002050:	b29b      	uxth	r3, r3
 8002052:	8013      	strh	r3, [r2, #0]
		  TiemADC=0;
 8002054:	2300      	movs	r3, #0
 8002056:	702b      	strb	r3, [r5, #0]
	  modo_process();
 8002058:	f7ff fd76 	bl	8001b48 <modo_process>
	  direccion_process();
 800205c:	f7ff fe06 	bl	8001c6c <direccion_process>
	  if(TiemADC>=10){
 8002060:	e7c1      	b.n	8001fe6 <main+0x2c2>
 8002062:	bf00      	nop
 8002064:	20000190 	.word	0x20000190

08002068 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){//Interrupcion adc
	uint32_t val[4];
	if(hadc->Instance==ADC1){
 8002068:	6802      	ldr	r2, [r0, #0]
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <HAL_ADC_ConvCpltCallback+0x14>)
 800206c:	429a      	cmp	r2, r3
 800206e:	d104      	bne.n	800207a <HAL_ADC_ConvCpltCallback+0x12>
		val[0]=adc_buf[0];
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_ADC_ConvCpltCallback+0x18>)
 8002072:	681a      	ldr	r2, [r3, #0]
		val[1]=adc_buf[1];
 8002074:	685a      	ldr	r2, [r3, #4]
		val[2]=adc_buf[2];
 8002076:	689a      	ldr	r2, [r3, #8]
		val[3]=adc_buf[3];
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	4770      	bx	lr
 800207c:	40012400 	.word	0x40012400
 8002080:	20000140 	.word	0x20000140

08002084 <HAL_TIM_PeriodElapsedCallback>:
	}
}
//Contador milis
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM2){
 8002084:	6803      	ldr	r3, [r0, #0]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d129      	bne.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0x5c>
		if(atimEN==1){
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d104      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0x1a>
			contAttack++;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002096:	8813      	ldrh	r3, [r2, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	8013      	strh	r3, [r2, #0]
		}
		//if(tadcEN==1){

			if(TiemADC>=10){
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80020a0:	7813      	ldrb	r3, [r2, #0]
 80020a2:	2b09      	cmp	r3, #9
				//TiemADC=0;
			}else{
			TiemADC++;
 80020a4:	bf9c      	itt	ls
 80020a6:	3301      	addls	r3, #1
 80020a8:	7013      	strbls	r3, [r2, #0]
			}
		//}
		if(contMilis<=1000){
 80020aa:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80020ac:	8813      	ldrh	r3, [r2, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b4:	d812      	bhi.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x58>
		contMilis++;
 80020b6:	8813      	ldrh	r3, [r2, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	8013      	strh	r3, [r2, #0]
		if(ST_MODO==DESCANSO){
 80020be:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020c0:	7813      	ldrb	r3, [r2, #0]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d10c      	bne.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0x5c>
			if(alistarse<=5000){
 80020c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80020ca:	490b      	ldr	r1, [pc, #44]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020cc:	880b      	ldrh	r3, [r1, #0]
 80020ce:	4283      	cmp	r3, r0
				alistarse++;
			}else{
				ST_MODO=BUSQUEDA;
 80020d0:	bf8d      	iteet	hi
 80020d2:	2300      	movhi	r3, #0
				alistarse++;
 80020d4:	3301      	addls	r3, #1
 80020d6:	800b      	strhls	r3, [r1, #0]
				ST_MODO=BUSQUEDA;
 80020d8:	7013      	strbhi	r3, [r2, #0]
 80020da:	4770      	bx	lr
			}

		}
		}else{
			contMilis=0;
 80020dc:	2300      	movs	r3, #0
 80020de:	8013      	strh	r3, [r2, #0]
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000034 	.word	0x20000034
 80020e8:	20000036 	.word	0x20000036
 80020ec:	20000030 	.word	0x20000030
 80020f0:	20000038 	.word	0x20000038
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000032 	.word	0x20000032

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_MspInit+0x3c>)
{
 8002102:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	f002 0201 	and.w	r2, r2, #1
 8002112:	9200      	str	r2, [sp, #0]
 8002114:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800211c:	61da      	str	r2, [r3, #28]
 800211e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800212a:	6853      	ldr	r3, [r2, #4]
 800212c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	b002      	add	sp, #8
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000

08002144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002144:	b530      	push	{r4, r5, lr}
 8002146:	4605      	mov	r5, r0
 8002148:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	2210      	movs	r2, #16
 800214c:	2100      	movs	r1, #0
 800214e:	a802      	add	r0, sp, #8
 8002150:	f000 f970 	bl	8002434 <memset>
  if(hadc->Instance==ADC1)
 8002154:	682a      	ldr	r2, [r5, #0]
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_ADC_MspInit+0x98>)
 8002158:	429a      	cmp	r2, r3
 800215a:	d13c      	bne.n	80021d6 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800215c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002160:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	481f      	ldr	r0, [pc, #124]	; (80021e0 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002168:	619a      	str	r2, [r3, #24]
 800216a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800216e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002172:	9200      	str	r2, [sp, #0]
 8002174:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002178:	4c1a      	ldr	r4, [pc, #104]	; (80021e4 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	f042 0204 	orr.w	r2, r2, #4
 800217e:	619a      	str	r2, [r3, #24]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800218a:	230f      	movs	r3, #15
 800218c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	2303      	movs	r3, #3
 8002190:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f7fe fc93 	bl	8000abc <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800219a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219e:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a6:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80021a8:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021aa:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ac:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021ae:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b0:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b2:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021b4:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021b8:	f7fe fb7e 	bl	80008b8 <HAL_DMA_Init>
 80021bc:	b108      	cbz	r0, 80021c2 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80021be:	f7ff ff9d 	bl	80020fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021c4:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80021c6:	2012      	movs	r0, #18
 80021c8:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021ca:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80021cc:	f7fe fb1e 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80021d0:	2012      	movs	r0, #18
 80021d2:	f7fe fb4f 	bl	8000874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021d6:	b007      	add	sp, #28
 80021d8:	bd30      	pop	{r4, r5, pc}
 80021da:	bf00      	nop
 80021dc:	40012400 	.word	0x40012400
 80021e0:	40010800 	.word	0x40010800
 80021e4:	200000b8 	.word	0x200000b8
 80021e8:	40020008 	.word	0x40020008

080021ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ec:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_TIM_Base_MspInit+0x54>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10c      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_TIM_Base_MspInit+0x58>)
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800220a:	b003      	add	sp, #12
 800220c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d1f9      	bne.n	800220a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002216:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800221a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002228:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002232:	f7fe faeb 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002236:	201c      	movs	r0, #28
 8002238:	f7fe fb1c 	bl	8000874 <HAL_NVIC_EnableIRQ>
}
 800223c:	e7e5      	b.n	800220a <HAL_TIM_Base_MspInit+0x1e>
 800223e:	bf00      	nop
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002248:	b510      	push	{r4, lr}
 800224a:	4604      	mov	r4, r0
 800224c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	2210      	movs	r2, #16
 8002250:	2100      	movs	r1, #0
 8002252:	a802      	add	r0, sp, #8
 8002254:	f000 f8ee 	bl	8002434 <memset>
  if(htim->Instance==TIM1)
 8002258:	6822      	ldr	r2, [r4, #0]
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_TIM_MspPostInit+0x48>)
 800225c:	429a      	cmp	r2, r3
 800225e:	d114      	bne.n	800228a <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002264:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	f042 0204 	orr.w	r2, r2, #4
 800226c:	619a      	str	r2, [r3, #24]
 800226e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	4808      	ldr	r0, [pc, #32]	; (8002294 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800227a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800227e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f7fe fc19 	bl	8000abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800228a:	b006      	add	sp, #24
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40010800 	.word	0x40010800

08002298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002298:	b510      	push	{r4, lr}
 800229a:	4604      	mov	r4, r0
 800229c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	2210      	movs	r2, #16
 80022a0:	2100      	movs	r1, #0
 80022a2:	a802      	add	r0, sp, #8
 80022a4:	f000 f8c6 	bl	8002434 <memset>
  if(huart->Instance==USART1)
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_UART_MspInit+0x78>)
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d12d      	bne.n	800230c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80022b4:	699a      	ldr	r2, [r3, #24]
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	4814      	ldr	r0, [pc, #80]	; (8002314 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80022c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022c6:	9200      	str	r2, [sp, #0]
 80022c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	f042 0208 	orr.w	r2, r2, #8
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f7fe fbe8 	bl	8000abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	a902      	add	r1, sp, #8
 80022f4:	4807      	ldr	r0, [pc, #28]	; (8002314 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f7fe fbdf 	bl	8000abc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80022fe:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_UART_MspInit+0x80>)
 8002300:	6853      	ldr	r3, [r2, #4]
 8002302:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800230c:	b006      	add	sp, #24
 800230e:	bd10      	pop	{r4, pc}
 8002310:	40013800 	.word	0x40013800
 8002314:	40010c00 	.word	0x40010c00
 8002318:	40010000 	.word	0x40010000

0800231c <NMI_Handler>:
 800231c:	4770      	bx	lr

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	e7fe      	b.n	800231e <HardFault_Handler>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler>

08002326 <SVC_Handler>:
 8002326:	4770      	bx	lr

08002328 <DebugMon_Handler>:
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	4770      	bx	lr

0800232c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f7fd bf44 	b.w	80001b8 <HAL_IncTick>

08002330 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002330:	4801      	ldr	r0, [pc, #4]	; (8002338 <DMA1_Channel1_IRQHandler+0x8>)
 8002332:	f7fe bb2f 	b.w	8000994 <HAL_DMA_IRQHandler>
 8002336:	bf00      	nop
 8002338:	200000b8 	.word	0x200000b8

0800233c <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800233c:	4801      	ldr	r0, [pc, #4]	; (8002344 <ADC1_2_IRQHandler+0x8>)
 800233e:	f7fd bf7b 	b.w	8000238 <HAL_ADC_IRQHandler>
 8002342:	bf00      	nop
 8002344:	20000048 	.word	0x20000048

08002348 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002348:	4801      	ldr	r0, [pc, #4]	; (8002350 <TIM2_IRQHandler+0x8>)
 800234a:	f7ff b8f0 	b.w	800152e <HAL_TIM_IRQHandler>
 800234e:	bf00      	nop
 8002350:	20000150 	.word	0x20000150

08002354 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <SystemInit+0x40>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <SystemInit+0x44>)
 8002362:	400a      	ands	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800236c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002370:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002378:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002380:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002382:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002386:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <SystemInit+0x48>)
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	f8ff0000 	.word	0xf8ff0000
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023a2:	e003      	b.n	80023ac <LoopCopyDataInit>

080023a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023aa:	3104      	adds	r1, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023ac:	480a      	ldr	r0, [pc, #40]	; (80023d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023b4:	d3f6      	bcc.n	80023a4 <CopyDataInit>
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023b8:	e002      	b.n	80023c0 <LoopFillZerobss>

080023ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023bc:	f842 3b04 	str.w	r3, [r2], #4

080023c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023c4:	d3f9      	bcc.n	80023ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023c6:	f7ff ffc5 	bl	8002354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f000 f80f 	bl	80023ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ce:	f7ff fca9 	bl	8001d24 <main>
  bx lr
 80023d2:	4770      	bx	lr
  ldr r3, =_sidata
 80023d4:	0800248c 	.word	0x0800248c
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023dc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80023e0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80023e4:	20000198 	.word	0x20000198

080023e8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <CAN1_RX1_IRQHandler>
	...

080023ec <__libc_init_array>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	2500      	movs	r5, #0
 80023f0:	4e0c      	ldr	r6, [pc, #48]	; (8002424 <__libc_init_array+0x38>)
 80023f2:	4c0d      	ldr	r4, [pc, #52]	; (8002428 <__libc_init_array+0x3c>)
 80023f4:	1ba4      	subs	r4, r4, r6
 80023f6:	10a4      	asrs	r4, r4, #2
 80023f8:	42a5      	cmp	r5, r4
 80023fa:	d109      	bne.n	8002410 <__libc_init_array+0x24>
 80023fc:	f000 f822 	bl	8002444 <_init>
 8002400:	2500      	movs	r5, #0
 8002402:	4e0a      	ldr	r6, [pc, #40]	; (800242c <__libc_init_array+0x40>)
 8002404:	4c0a      	ldr	r4, [pc, #40]	; (8002430 <__libc_init_array+0x44>)
 8002406:	1ba4      	subs	r4, r4, r6
 8002408:	10a4      	asrs	r4, r4, #2
 800240a:	42a5      	cmp	r5, r4
 800240c:	d105      	bne.n	800241a <__libc_init_array+0x2e>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002414:	4798      	blx	r3
 8002416:	3501      	adds	r5, #1
 8002418:	e7ee      	b.n	80023f8 <__libc_init_array+0xc>
 800241a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800241e:	4798      	blx	r3
 8002420:	3501      	adds	r5, #1
 8002422:	e7f2      	b.n	800240a <__libc_init_array+0x1e>
 8002424:	08002484 	.word	0x08002484
 8002428:	08002484 	.word	0x08002484
 800242c:	08002484 	.word	0x08002484
 8002430:	08002488 	.word	0x08002488

08002434 <memset>:
 8002434:	4603      	mov	r3, r0
 8002436:	4402      	add	r2, r0
 8002438:	4293      	cmp	r3, r2
 800243a:	d100      	bne.n	800243e <memset+0xa>
 800243c:	4770      	bx	lr
 800243e:	f803 1b01 	strb.w	r1, [r3], #1
 8002442:	e7f9      	b.n	8002438 <memset+0x4>

08002444 <_init>:
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	bf00      	nop
 8002448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244a:	bc08      	pop	{r3}
 800244c:	469e      	mov	lr, r3
 800244e:	4770      	bx	lr

08002450 <_fini>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	bf00      	nop
 8002454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002456:	bc08      	pop	{r3}
 8002458:	469e      	mov	lr, r3
 800245a:	4770      	bx	lr
